// This file is auto-generated by @hey-api/openapi-ts

export const TimedEventResetSchema = {
    properties: {
        type: {
            type: 'string',
            enum: ['system-reset'],
            nullable: false
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const TimedEventCleanAuditLogsSchema = {
    properties: {
        type: {
            type: 'string',
            enum: ['clean-audit-logs'],
            nullable: false
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const SwitchHandlerParamsSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        handler: {
            type: 'string'
        }
    },
    required: ['id', 'handler'],
    type: 'object',
    additionalProperties: false
} as const;

export const TimedEventSwitchHandlerAudioSchema = {
    properties: {
        params: {
            '$ref': '#/components/schemas/SwitchHandlerParams'
        },
        type: {
            type: 'string',
            enum: ['switch-handler-audio'],
            nullable: false
        }
    },
    required: ['params', 'type'],
    type: 'object'
} as const;

export const TimedEventSwitchHandlerLightsSchema = {
    properties: {
        params: {
            '$ref': '#/components/schemas/SwitchHandlerParams'
        },
        type: {
            type: 'string',
            enum: ['switch-handler-lights'],
            nullable: false
        }
    },
    required: ['params', 'type'],
    type: 'object'
} as const;

export const TimedEventSwitchHandlerScreenSchema = {
    properties: {
        params: {
            '$ref': '#/components/schemas/SwitchHandlerParams'
        },
        type: {
            type: 'string',
            enum: ['switch-handler-screen'],
            nullable: false
        }
    },
    required: ['params', 'type'],
    type: 'object'
} as const;

export const TimedEventSetStaticPosterSchema = {
    properties: {
        params: {
            properties: {
                clockVisible: {
                    type: 'boolean'
                },
                posterId: {
                    type: 'number',
                    format: 'double'
                }
            },
            required: ['clockVisible', 'posterId'],
            type: 'object'
        },
        type: {
            type: 'string',
            enum: ['timed-event-set-static-poster'],
            nullable: false
        }
    },
    required: ['params', 'type'],
    type: 'object'
} as const;

export const EventSpecSchema = {
    anyOf: [
        {
            '$ref': '#/components/schemas/TimedEventReset'
        },
        {
            '$ref': '#/components/schemas/TimedEventCleanAuditLogs'
        },
        {
            '$ref': '#/components/schemas/TimedEventSwitchHandlerAudio'
        },
        {
            '$ref': '#/components/schemas/TimedEventSwitchHandlerLights'
        },
        {
            '$ref': '#/components/schemas/TimedEventSwitchHandlerScreen'
        },
        {
            '$ref': '#/components/schemas/TimedEventSetStaticPoster'
        }
    ]
} as const;

export const TimedEventResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        cronExpression: {
            type: 'string'
        },
        eventSpec: {
            '$ref': '#/components/schemas/EventSpec'
        },
        skipNext: {
            type: 'boolean'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'cronExpression', 'eventSpec', 'skipNext'],
    type: 'object',
    additionalProperties: false
} as const;

export const CreateTimedEventRequestSchema = {
    properties: {
        cronExpression: {
            type: 'string'
        },
        eventSpec: {
            '$ref': '#/components/schemas/EventSpec'
        }
    },
    required: ['cronExpression', 'eventSpec'],
    type: 'object',
    additionalProperties: false
} as const;

export const UpdateTimedEventRequestSchema = {
    properties: {
        cronExpression: {
            type: 'string'
        },
        eventSpec: {
            '$ref': '#/components/schemas/EventSpec'
        },
        skipNext: {
            type: 'boolean',
            description: 'Whether the next time this should fire, it should be skipped instead'
        }
    },
    required: ['cronExpression', 'eventSpec', 'skipNext'],
    type: 'object',
    additionalProperties: false
} as const;

export const DineroObjectResponseSchema = {
    properties: {
        amount: {
            type: 'number',
            format: 'double',
            description: 'amount'
        },
        currency: {
            type: 'string',
            description: 'currency'
        },
        precision: {
            type: 'number',
            format: 'double',
            description: 'precision'
        }
    },
    required: ['amount', 'currency', 'precision'],
    type: 'object',
    additionalProperties: false
} as const;

export const SudoSOSDebtorResponseSchema = {
    properties: {
        userId: {
            type: 'number',
            format: 'double'
        },
        firstName: {
            type: 'string'
        },
        nickName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        balance: {
            '$ref': '#/components/schemas/DineroObjectResponse'
        },
        fine: {
            '$ref': '#/components/schemas/DineroObjectResponse'
        },
        isBac: {
            type: 'boolean'
        },
        isLongstanding: {
            type: 'boolean',
            description: 'If the user has a fine for more than 4 weeks'
        }
    },
    required: ['userId', 'firstName', 'balance', 'isBac', 'isLongstanding'],
    type: 'object',
    additionalProperties: false
} as const;

export const BaseVatGroupResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double',
            description: 'The unique id of the entity.'
        },
        createdAt: {
            type: 'string',
            description: 'The creation Date of the entity.'
        },
        updatedAt: {
            type: 'string',
            description: 'The last update Date of the entity.'
        },
        version: {
            type: 'number',
            format: 'double',
            description: 'The version of the entity.'
        },
        percentage: {
            type: 'number',
            format: 'double',
            description: 'Percentage of VAT'
        },
        hidden: {
            type: 'boolean',
            description: 'Whether VAT should be hidden'
        }
    },
    required: ['id', 'percentage', 'hidden'],
    type: 'object',
    additionalProperties: false
} as const;

export const BaseUserResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double',
            description: 'The unique id of the entity.'
        },
        createdAt: {
            type: 'string',
            description: 'The creation Date of the entity.'
        },
        updatedAt: {
            type: 'string',
            description: 'The last update Date of the entity.'
        },
        version: {
            type: 'number',
            format: 'double',
            description: 'The version of the entity.'
        },
        firstName: {
            type: 'string',
            description: 'The name of the user.'
        },
        lastName: {
            type: 'string',
            description: 'The last name of the user'
        },
        nickname: {
            type: 'string',
            description: 'The nickname of the user'
        }
    },
    required: ['id', 'firstName', 'lastName'],
    type: 'object',
    additionalProperties: false
} as const;

export const ProductCategoryResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double',
            description: 'The unique id of the entity.'
        },
        createdAt: {
            type: 'string',
            description: 'The creation Date of the entity.'
        },
        updatedAt: {
            type: 'string',
            description: 'The last update Date of the entity.'
        },
        version: {
            type: 'number',
            format: 'double',
            description: 'The version of the entity.'
        },
        name: {
            type: 'string',
            description: 'The name of the productCategory.'
        },
        parent: {
            '$ref': '#/components/schemas/ProductCategoryResponse'
        }
    },
    required: ['id', 'name'],
    type: 'object',
    additionalProperties: false
} as const;

export const ProductResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double',
            description: 'The unique id of the entity.'
        },
        createdAt: {
            type: 'string',
            description: 'The creation Date of the entity.'
        },
        updatedAt: {
            type: 'string',
            description: 'The last update Date of the entity.'
        },
        version: {
            type: 'number',
            format: 'double',
            description: 'The version of the entity.'
        },
        name: {
            type: 'string',
            description: 'The name of the product.'
        },
        priceInclVat: {
            '$ref': '#/components/schemas/DineroObjectResponse'
        },
        vat: {
            '$ref': '#/components/schemas/BaseVatGroupResponse'
        },
        revision: {
            type: 'number',
            format: 'double',
            description: 'The product revision ID'
        },
        owner: {
            '$ref': '#/components/schemas/BaseUserResponse'
        },
        category: {
            '$ref': '#/components/schemas/ProductCategoryResponse'
        },
        priceExclVat: {
            '$ref': '#/components/schemas/DineroObjectResponse'
        },
        image: {
            type: 'string',
            description: 'The URL to the picture representing this product.'
        },
        alcoholPercentage: {
            type: 'number',
            format: 'double',
            description: 'The percentage of alcohol in this product.'
        },
        featured: {
            type: 'boolean',
            description: 'If product is featured'
        },
        preferred: {
            type: 'boolean',
            description: 'If product is preferred'
        },
        priceList: {
            type: 'boolean',
            description: 'If product is shown on narrow casting screens'
        }
    },
    required: ['id', 'name', 'priceInclVat', 'vat', 'revision', 'owner', 'category', 'priceExclVat', 'alcoholPercentage', 'featured', 'preferred', 'priceList'],
    type: 'object',
    additionalProperties: false
} as const;

export const ExternalUrlsSchema = {
    properties: {
        spotify: {
            type: 'string'
        }
    },
    required: ['spotify'],
    type: 'object',
    additionalProperties: false
} as const;

export const FollowersSchema = {
    properties: {
        href: {
            type: 'string',
            nullable: true
        },
        total: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['href', 'total'],
    type: 'object',
    additionalProperties: false
} as const;

export const ImageSchema = {
    properties: {
        url: {
            type: 'string'
        },
        height: {
            type: 'number',
            format: 'double'
        },
        width: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['url', 'height', 'width'],
    type: 'object',
    additionalProperties: false
} as const;

export const SpotifyUserProfileSchema = {
    properties: {
        display_name: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        external_urls: {
            '$ref': '#/components/schemas/ExternalUrls'
        },
        followers: {
            '$ref': '#/components/schemas/Followers'
        },
        href: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        images: {
            items: {
                '$ref': '#/components/schemas/Image'
            },
            type: 'array'
        },
        type: {
            type: 'string'
        },
        uri: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        explicit_content: {
            properties: {
                filter_locked: {
                    type: 'boolean'
                },
                filter_enabled: {
                    type: 'boolean'
                }
            },
            required: ['filter_locked', 'filter_enabled'],
            type: 'object'
        },
        product: {
            type: 'string'
        }
    },
    required: ['display_name', 'email', 'external_urls', 'followers', 'href', 'id', 'images', 'type', 'uri', 'country', 'explicit_content', 'product'],
    type: 'object',
    additionalProperties: false
} as const;

export const SpotifyUserResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        spotifyId: {
            type: 'string'
        },
        active: {
            type: 'boolean'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name', 'spotifyId', 'active'],
    type: 'object',
    additionalProperties: false
} as const;

export const TrackChangeEventSchema = {
    properties: {
        title: {
            type: 'string'
        },
        artists: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        startTime: {
            type: 'string',
            format: 'date-time'
        },
        cover: {
            type: 'string'
        },
        trackURI: {
            type: 'string'
        }
    },
    required: ['title', 'artists', 'startTime', 'trackURI'],
    type: 'object',
    additionalProperties: false
} as const;

export const HexColorSchema = {
    type: 'string'
} as const;

export const IFileSchema = {
    properties: {
        relativeDirectory: {
            type: 'string',
            description: 'In which directory on disk (relative to the root directory) this file is stored'
        },
        name: {
            type: 'string',
            description: 'Name of the file on disk'
        },
        originalName: {
            type: 'string',
            description: 'Original name of the file'
        }
    },
    required: ['relativeDirectory', 'name', 'originalName'],
    type: 'object',
    additionalProperties: false
} as const;

export const ISettingsSchema = {
    properties: {
        SudoSOS: {
            type: 'boolean'
        },
        'SudoSOS.BorrelmodePOSID': {
            type: 'integer',
            format: 'int32'
        },
        'SudoSOS.BACGroupID': {
            type: 'integer',
            format: 'int32'
        },
        Centurion: {
            type: 'boolean',
            description: 'Whether Centurion Mode should be available/present.'
        },
        'Centurion.DiscoballLightsSwitchIds': {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array',
            description: `IDs of all light switches that should be activated when a discoball
should be turned on.`
        },
        TimeTrailRace: {
            type: 'boolean',
            description: 'Whether Time Trail Race (Spoelbakkenrace) should be available/present.'
        },
        RoomResponsibleLegacyScreenURL: {
            type: 'string'
        },
        Poster: {
            type: 'boolean',
            description: 'Whether the screen poster handler should be enabled.'
        },
        'Poster.DefaultMinimal': {
            type: 'boolean',
            description: 'Whether the bottom progress bar should be minimal by default.'
        },
        'Poster.DefaultProgressBarColor': {
            '$ref': '#/components/schemas/HexColor',
            description: 'The default color of the progress bar.'
        },
        'Poster.ProgressBarPosterColors': {
            type: 'boolean',
            description: 'Whether the progress bar color can be overriden by individual posters.'
        },
        'Poster.ProgressBarLogo': {
            anyOf: [
                {
                    '$ref': '#/components/schemas/IFile'
                },
                {
                    type: 'string',
                    enum: ['']
                }
            ],
            description: `The logo that should be shown in the bottom left corner of the progress bar.
Can be kept clear to imply no logo should be used.`
        },
        'Poster.BorrelModePresent': {
            type: 'boolean',
            description: `Whether "borrel mode" is present, namely a toggle adding an extra set of
posters to the rotation.`
        },
        'Poster.CustomStylesheet': {
            anyOf: [
                {
                    '$ref': '#/components/schemas/IFile'
                },
                {
                    type: 'string',
                    enum: ['']
                }
            ],
            description: 'Custom stylesheet defining the layout of the poster screen progress bar.'
        },
        'Poster.ClockShouldTick': {
            type: 'boolean',
            description: 'Whether the double-dots (:) in the middle of the clock should flicker'
        },
        Orders: {
            type: 'boolean'
        },
        'Orders.DefaultTimeoutSeconds': {
            type: 'number',
            format: 'double'
        },
        'Orders.WebhookPublicKeyURL': {
            type: 'string',
            deprecated: true
        },
        'Orders.WebhookPublicKeyExpirySeconds': {
            type: 'number',
            format: 'double',
            deprecated: true
        }
    },
    required: ['SudoSOS', 'SudoSOS.BorrelmodePOSID', 'SudoSOS.BACGroupID', 'Centurion', 'Centurion.DiscoballLightsSwitchIds', 'TimeTrailRace', 'RoomResponsibleLegacyScreenURL', 'Poster', 'Poster.DefaultMinimal', 'Poster.DefaultProgressBarColor', 'Poster.ProgressBarPosterColors', 'Poster.ProgressBarLogo', 'Poster.BorrelModePresent', 'Poster.CustomStylesheet', 'Poster.ClockShouldTick', 'Orders', 'Orders.DefaultTimeoutSeconds', 'Orders.WebhookPublicKeyURL', 'Orders.WebhookPublicKeyExpirySeconds'],
    type: 'object',
    additionalProperties: false
} as const;

export const ServerSettingResponseSchema = {
    properties: {
        key: {
            type: 'string',
            enum: ['SudoSOS', 'SudoSOS.BorrelmodePOSID', 'SudoSOS.BACGroupID', 'Centurion', 'Centurion.DiscoballLightsSwitchIds', 'TimeTrailRace', 'RoomResponsibleLegacyScreenURL', 'Poster', 'Poster.DefaultMinimal', 'Poster.DefaultProgressBarColor', 'Poster.ProgressBarPosterColors', 'Poster.ProgressBarLogo', 'Poster.BorrelModePresent', 'Poster.CustomStylesheet', 'Poster.ClockShouldTick', 'Orders', 'Orders.DefaultTimeoutSeconds', 'Orders.WebhookPublicKeyURL', 'Orders.WebhookPublicKeyExpirySeconds'],
            nullable: false
        },
        value: {}
    },
    required: ['key', 'value'],
    type: 'object',
    additionalProperties: false
} as const;

export const SetServerSettingRequestSchema = {
    properties: {
        value: {},
        key: {
            type: 'string'
        }
    },
    required: ['value', 'key'],
    type: 'object'
} as const;

export const FeatureFlagResponseSchema = {
    items: {
        properties: {
            value: {
                type: 'boolean'
            },
            key: {
                type: 'string'
            }
        },
        required: ['value', 'key'],
        type: 'object'
    },
    type: 'array'
} as const;

export const Partial_Record_SocketioNamespaces_string__Schema = {
    properties: {
        '/': {
            type: 'string'
        },
        '/audio': {
            type: 'string'
        },
        '/screen': {
            type: 'string'
        },
        '/lights': {
            type: 'string'
        },
        '/public': {
            type: 'string'
        }
    },
    type: 'object',
    description: 'Make all properties in T optional'
} as const;

export const ScreenResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        socketIds: {
            '$ref': '#/components/schemas/Partial_Record_SocketioNamespaces.string__',
            description: `ID of the socket connection if present.
Required to send events specifically and only to this entity.
Mapping from namespace to ID, as a websocket has a different ID
for each namespace its in.`
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name'],
    type: 'object',
    additionalProperties: false
} as const;

export const ScreenCreateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        defaultHandler: {
            type: 'string'
        }
    },
    required: ['name', 'defaultHandler'],
    type: 'object',
    additionalProperties: false
} as const;

export const StrobePropsSchema = {
    properties: {
        durationMs: {
            type: 'integer',
            format: 'int32',
            description: 'Duration in milliseconds',
            minimum: 0
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const GroupFixtureDimmingParamsSchema = {
    properties: {
        relativeBrightness: {
            type: 'number',
            format: 'double',
            description: 'Relative brightness of the fixture(s). Value in range [0, 1]',
            minimum: 0,
            maximum: 1
        }
    },
    required: ['relativeBrightness'],
    type: 'object',
    additionalProperties: false
} as const;

export const GroupFixtureOverrideParamsSchema = {
    properties: {
        dmxValues: {
            items: {
                type: 'number',
                format: 'double',
                nullable: true
            },
            type: 'array',
            description: `Slice of DMX channel values that should be send to the fixture.
The first value will be put on CH1, the second on CH2, the third on CH3, etc.
Use "null" to indicate the channel should not be overriden.`
        }
    },
    required: ['dmxValues'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsControllerResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        socketIds: {
            '$ref': '#/components/schemas/Partial_Record_SocketioNamespaces.string__',
            description: `ID of the socket connection if present.
Required to send events specifically and only to this entity.
Mapping from namespace to ID, as a websocket has a different ID
for each namespace its in.`
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsControllerCreateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        }
    },
    required: ['name'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsSwitchResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        dmxChannel: {
            type: 'number',
            format: 'double',
            description: 'DMX channel this lights switch is on'
        },
        onValue: {
            type: 'number',
            format: 'double',
            description: 'DMX value to send to the channel to turn on the switch'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name', 'dmxChannel', 'onValue'],
    type: 'object',
    additionalProperties: false
} as const;

export const ShutterChannelValuesResponseSchema = {
    properties: {
        open: {
            type: 'number',
            format: 'double'
        },
        strobe: {
            type: 'number',
            format: 'double'
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const ParResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        nrChannels: {
            type: 'number',
            format: 'double'
        },
        canReset: {
            type: 'boolean'
        },
        resetChannel: {
            type: 'number',
            format: 'double'
        },
        resetChannelValue: {
            type: 'number',
            format: 'double'
        },
        shutterChannelValues: {
            '$ref': '#/components/schemas/ShutterChannelValuesResponse'
        },
        masterDimChannel: {
            type: 'number',
            format: 'double'
        },
        shutterChannel: {
            type: 'number',
            format: 'double'
        },
        redChannel: {
            type: 'number',
            format: 'double'
        },
        blueChannel: {
            type: 'number',
            format: 'double'
        },
        greenChannel: {
            type: 'number',
            format: 'double'
        },
        coldWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        warmWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        amberChannel: {
            type: 'number',
            format: 'double'
        },
        uvChannel: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name', 'nrChannels', 'canReset', 'shutterChannelValues', 'redChannel', 'blueChannel', 'greenChannel'],
    type: 'object',
    additionalProperties: false
} as const;

export const FixtureInGroupResponse_ParResponse_Schema = {
    properties: {
        fixture: {
            '$ref': '#/components/schemas/ParResponse'
        },
        id: {
            type: 'number',
            format: 'double'
        },
        firstChannel: {
            type: 'number',
            format: 'double'
        },
        positionX: {
            type: 'number',
            format: 'double'
        },
        positionY: {
            type: 'number',
            format: 'double'
        },
        masterDimmer: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['fixture', 'id', 'firstChannel', 'positionX', 'positionY', 'masterDimmer'],
    type: 'object',
    additionalProperties: false
} as const;

export const MovingHeadRgbResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        nrChannels: {
            type: 'number',
            format: 'double'
        },
        canReset: {
            type: 'boolean'
        },
        resetChannel: {
            type: 'number',
            format: 'double'
        },
        resetChannelValue: {
            type: 'number',
            format: 'double'
        },
        shutterChannelValues: {
            '$ref': '#/components/schemas/ShutterChannelValuesResponse'
        },
        panChannel: {
            type: 'number',
            format: 'double'
        },
        finePanChannel: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        tiltChannel: {
            type: 'number',
            format: 'double'
        },
        fineTiltChannel: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        movingSpeedChannel: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        masterDimChannel: {
            type: 'number',
            format: 'double'
        },
        shutterChannel: {
            type: 'number',
            format: 'double'
        },
        redChannel: {
            type: 'number',
            format: 'double'
        },
        blueChannel: {
            type: 'number',
            format: 'double'
        },
        greenChannel: {
            type: 'number',
            format: 'double'
        },
        coldWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        warmWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        amberChannel: {
            type: 'number',
            format: 'double'
        },
        uvChannel: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name', 'nrChannels', 'canReset', 'shutterChannelValues', 'panChannel', 'tiltChannel', 'redChannel', 'blueChannel', 'greenChannel'],
    type: 'object',
    additionalProperties: false
} as const;

export const FixtureInGroupResponse_MovingHeadRgbResponse_Schema = {
    properties: {
        fixture: {
            '$ref': '#/components/schemas/MovingHeadRgbResponse'
        },
        id: {
            type: 'number',
            format: 'double'
        },
        firstChannel: {
            type: 'number',
            format: 'double'
        },
        positionX: {
            type: 'number',
            format: 'double'
        },
        positionY: {
            type: 'number',
            format: 'double'
        },
        masterDimmer: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['fixture', 'id', 'firstChannel', 'positionX', 'positionY', 'masterDimmer'],
    type: 'object',
    additionalProperties: false
} as const;

export const WheelColorSchema = {
    enum: ['white', 'red', 'green', 'blue', 'yellow', 'lightblue', 'orange', 'rosered'],
    type: 'string'
} as const;

export const MovingHeadWheelColorChannelValueResponseSchema = {
    properties: {
        color: {
            '$ref': '#/components/schemas/WheelColor'
        },
        channelValue: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['color', 'channelValue'],
    type: 'object',
    additionalProperties: false
} as const;

export const MovingHeadWheelResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        nrChannels: {
            type: 'number',
            format: 'double'
        },
        canReset: {
            type: 'boolean'
        },
        resetChannel: {
            type: 'number',
            format: 'double'
        },
        resetChannelValue: {
            type: 'number',
            format: 'double'
        },
        shutterChannelValues: {
            '$ref': '#/components/schemas/ShutterChannelValuesResponse'
        },
        panChannel: {
            type: 'number',
            format: 'double'
        },
        finePanChannel: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        tiltChannel: {
            type: 'number',
            format: 'double'
        },
        fineTiltChannel: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        movingSpeedChannel: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        masterDimChannel: {
            type: 'number',
            format: 'double'
        },
        shutterChannel: {
            type: 'number',
            format: 'double'
        },
        wheelColorChannel: {
            type: 'number',
            format: 'double'
        },
        wheelColorChannelValues: {
            items: {
                '$ref': '#/components/schemas/MovingHeadWheelColorChannelValueResponse'
            },
            type: 'array'
        },
        wheelGoboChannel: {
            type: 'number',
            format: 'double'
        },
        gobos: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        wheelGoboRotateChannel: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        goboRotates: {
            items: {
                type: 'string'
            },
            type: 'array'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name', 'nrChannels', 'canReset', 'shutterChannelValues', 'panChannel', 'tiltChannel', 'masterDimChannel', 'wheelColorChannel', 'wheelColorChannelValues', 'wheelGoboChannel', 'gobos', 'wheelGoboRotateChannel', 'goboRotates'],
    type: 'object',
    additionalProperties: false
} as const;

export const FixtureInGroupResponse_MovingHeadWheelResponse_Schema = {
    properties: {
        fixture: {
            '$ref': '#/components/schemas/MovingHeadWheelResponse'
        },
        id: {
            type: 'number',
            format: 'double'
        },
        firstChannel: {
            type: 'number',
            format: 'double'
        },
        positionX: {
            type: 'number',
            format: 'double'
        },
        positionY: {
            type: 'number',
            format: 'double'
        },
        masterDimmer: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['fixture', 'id', 'firstChannel', 'positionX', 'positionY', 'masterDimmer'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsGroupResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        controller: {
            '$ref': '#/components/schemas/LightsControllerResponse'
        },
        gridSizeX: {
            type: 'number',
            format: 'double'
        },
        gridSizeY: {
            type: 'number',
            format: 'double'
        },
        pars: {
            items: {
                '$ref': '#/components/schemas/FixtureInGroupResponse_ParResponse_'
            },
            type: 'array'
        },
        movingHeadRgbs: {
            items: {
                '$ref': '#/components/schemas/FixtureInGroupResponse_MovingHeadRgbResponse_'
            },
            type: 'array'
        },
        movingHeadWheels: {
            items: {
                '$ref': '#/components/schemas/FixtureInGroupResponse_MovingHeadWheelResponse_'
            },
            type: 'array'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name', 'controller', 'gridSizeX', 'gridSizeY', 'pars', 'movingHeadRgbs', 'movingHeadWheels'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsInGroupSchema = {
    properties: {
        fixtureId: {
            type: 'number',
            format: 'double'
        },
        firstChannel: {
            type: 'integer',
            format: 'int32',
            minimum: 0
        },
        positionX: {
            type: 'number',
            format: 'float',
            description: "Position of the fixture within the group's grid/line",
            minimum: 0
        },
        positionY: {
            type: 'number',
            format: 'float',
            description: `Position of the fixture within the group's grid.
Should be undefined if the group is a line of fixtures
(and not a grid).`,
            minimum: 0
        }
    },
    required: ['fixtureId', 'firstChannel', 'positionX'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsGroupCreateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        defaultHandler: {
            type: 'string'
        },
        gridSizeX: {
            type: 'number',
            format: 'float',
            description: `Size (width) of the X axis where all the fixtures are positioned.
All fixtures should have their positionX be in range [0, gridSizeX).`,
            minimum: 0
        },
        gridSizeY: {
            type: 'number',
            format: 'float',
            description: `Size (width) of the Y axis where all the fixtures are positioned.
0 if the lights are positioned in a line (and not in a grid)`,
            minimum: 0
        },
        pars: {
            items: {
                '$ref': '#/components/schemas/LightsInGroup'
            },
            type: 'array'
        },
        movingHeadRgbs: {
            items: {
                '$ref': '#/components/schemas/LightsInGroup'
            },
            type: 'array'
        },
        movingHeadWheels: {
            items: {
                '$ref': '#/components/schemas/LightsInGroup'
            },
            type: 'array'
        }
    },
    required: ['name', 'defaultHandler', 'gridSizeX', 'pars', 'movingHeadRgbs', 'movingHeadWheels'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsSwitchCreateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        dmxChannel: {
            type: 'number',
            format: 'double',
            description: 'DMX channel this lights switch is on'
        },
        onValue: {
            type: 'number',
            format: 'double',
            description: 'DMX value to send to the channel to turn on the switch'
        }
    },
    required: ['name', 'dmxChannel', 'onValue'],
    type: 'object',
    additionalProperties: false
} as const;

export const ShutterOptionValuesSchema = {
    properties: {
        open: {
            type: 'number',
            format: 'double'
        },
        strobe: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['open', 'strobe'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsParCreateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        nrChannels: {
            type: 'number',
            format: 'double'
        },
        shutterOptionValues: {
            '$ref': '#/components/schemas/ShutterOptionValues'
        },
        masterDimChannel: {
            type: 'number',
            format: 'double'
        },
        shutterChannel: {
            type: 'number',
            format: 'double'
        },
        colorRedChannel: {
            type: 'number',
            format: 'double'
        },
        colorGreenChannel: {
            type: 'number',
            format: 'double'
        },
        colorBlueChannel: {
            type: 'number',
            format: 'double'
        },
        colorColdWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        colorWarmWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        colorAmberChannel: {
            type: 'number',
            format: 'double'
        },
        colorUvChannel: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['name', 'nrChannels', 'colorRedChannel', 'colorGreenChannel', 'colorBlueChannel'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsMovingHeadRgbCreateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        nrChannels: {
            type: 'number',
            format: 'double'
        },
        shutterOptionValues: {
            '$ref': '#/components/schemas/ShutterOptionValues'
        },
        panChannel: {
            type: 'number',
            format: 'double'
        },
        finePanChannel: {
            type: 'number',
            format: 'double'
        },
        tiltChannel: {
            type: 'number',
            format: 'double'
        },
        fineTiltChannel: {
            type: 'number',
            format: 'double'
        },
        movingSpeedChannel: {
            type: 'number',
            format: 'double'
        },
        basePanValue: {
            type: 'number',
            format: 'double'
        },
        masterDimChannel: {
            type: 'number',
            format: 'double'
        },
        shutterChannel: {
            type: 'number',
            format: 'double'
        },
        colorRedChannel: {
            type: 'number',
            format: 'double'
        },
        colorGreenChannel: {
            type: 'number',
            format: 'double'
        },
        colorBlueChannel: {
            type: 'number',
            format: 'double'
        },
        colorColdWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        colorWarmWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        colorAmberChannel: {
            type: 'number',
            format: 'double'
        },
        colorUvChannel: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['name', 'nrChannels', 'panChannel', 'tiltChannel', 'colorRedChannel', 'colorGreenChannel', 'colorBlueChannel'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsMovingHeadWheelCreateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        nrChannels: {
            type: 'number',
            format: 'double'
        },
        shutterOptionValues: {
            '$ref': '#/components/schemas/ShutterOptionValues'
        },
        panChannel: {
            type: 'number',
            format: 'double'
        },
        finePanChannel: {
            type: 'number',
            format: 'double'
        },
        tiltChannel: {
            type: 'number',
            format: 'double'
        },
        fineTiltChannel: {
            type: 'number',
            format: 'double'
        },
        movingSpeedChannel: {
            type: 'number',
            format: 'double'
        },
        basePanValue: {
            type: 'number',
            format: 'double'
        },
        masterDimChannel: {
            type: 'number',
            format: 'double'
        },
        shutterChannel: {
            type: 'number',
            format: 'double'
        },
        colorWheelChannel: {
            type: 'number',
            format: 'double'
        },
        colorWheelChannelValues: {
            items: {
                properties: {
                    value: {
                        type: 'number',
                        format: 'double'
                    },
                    name: {
                        type: 'string'
                    }
                },
                required: ['value', 'name'],
                type: 'object'
            },
            type: 'array'
        },
        goboWheelChannel: {
            type: 'number',
            format: 'double'
        },
        goboWheelChannelValues: {
            items: {
                properties: {
                    value: {
                        type: 'number',
                        format: 'double'
                    },
                    name: {
                        type: 'string'
                    }
                },
                required: ['value', 'name'],
                type: 'object'
            },
            type: 'array'
        },
        goboRotateChannel: {
            type: 'number',
            format: 'double'
        },
        goboRotateChannelValues: {
            items: {
                properties: {
                    value: {
                        type: 'number',
                        format: 'double'
                    },
                    name: {
                        type: 'string'
                    }
                },
                required: ['value', 'name'],
                type: 'object'
            },
            type: 'array'
        }
    },
    required: ['name', 'nrChannels', 'panChannel', 'tiltChannel', 'masterDimChannel', 'colorWheelChannel', 'colorWheelChannelValues', 'goboWheelChannel', 'goboWheelChannelValues', 'goboRotateChannelValues'],
    type: 'object',
    additionalProperties: false
} as const;

export const RgbColorSchema = {
    enum: ['white', 'red', 'green', 'blue', 'yellow', 'lightblue', 'orange', 'rosered', 'purple', 'cyan', 'pink', 'gold', 'brown', 'lightpink', 'lime', 'uv', 'blindingwhite'],
    type: 'string'
} as const;

export const Required_IColorsRgb_Schema = {
    properties: {
        redChannel: {
            type: 'number',
            format: 'double'
        },
        greenChannel: {
            type: 'number',
            format: 'double'
        },
        blueChannel: {
            type: 'number',
            format: 'double'
        },
        coldWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        warmWhiteChannel: {
            type: 'number',
            format: 'double'
        },
        amberChannel: {
            type: 'number',
            format: 'double'
        },
        uvChannel: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['redChannel', 'greenChannel', 'blueChannel', 'coldWhiteChannel', 'warmWhiteChannel', 'amberChannel', 'uvChannel'],
    type: 'object',
    description: 'Make all properties in T required'
} as const;

export const RgbColorSpecificationSchema = {
    properties: {
        hex: {
            '$ref': '#/components/schemas/HexColor'
        },
        complementary: {
            items: {
                '$ref': '#/components/schemas/RgbColor'
            },
            type: 'array'
        },
        alternative: {
            '$ref': '#/components/schemas/WheelColor'
        },
        definition: {
            '$ref': '#/components/schemas/Required_IColorsRgb_'
        }
    },
    required: ['hex', 'complementary', 'alternative', 'definition'],
    type: 'object'
} as const;

export const LightsColorResponseSchema = {
    properties: {
        color: {
            '$ref': '#/components/schemas/RgbColor'
        },
        spec: {
            '$ref': '#/components/schemas/RgbColorSpecification'
        }
    },
    required: ['color', 'spec'],
    type: 'object',
    additionalProperties: false
} as const;

export const AudioResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        },
        socketIds: {
            '$ref': '#/components/schemas/Partial_Record_SocketioNamespaces.string__',
            description: `ID of the socket connection if present.
Required to send events specifically and only to this entity.
Mapping from namespace to ID, as a websocket has a different ID
for each namespace its in.`
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name'],
    type: 'object',
    additionalProperties: false
} as const;

export const AudioCreateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        defaultHandler: {
            type: 'string'
        }
    },
    required: ['name', 'defaultHandler'],
    type: 'object',
    additionalProperties: false
} as const;

export const SetAudioPlayingParamsSchema = {
    properties: {
        playing: {
            type: 'boolean'
        }
    },
    required: ['playing'],
    type: 'object',
    additionalProperties: false
} as const;

export const HandlerResponse_AudioResponse_Schema = {
    properties: {
        entities: {
            items: {
                '$ref': '#/components/schemas/AudioResponse'
            },
            type: 'array'
        },
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    required: ['entities', 'id', 'name'],
    type: 'object',
    additionalProperties: false
} as const;

export const NewHandlerParamsSchema = {
    properties: {
        name: {
            type: 'string'
        }
    },
    required: ['name'],
    type: 'object',
    additionalProperties: false
} as const;

export const HandlerResponse_LightsGroupResponse_Schema = {
    properties: {
        entities: {
            items: {
                '$ref': '#/components/schemas/LightsGroupResponse'
            },
            type: 'array'
        },
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    required: ['entities', 'id', 'name'],
    type: 'object',
    additionalProperties: false
} as const;

export const HandlerResponse_ScreenResponse_Schema = {
    properties: {
        entities: {
            items: {
                '$ref': '#/components/schemas/ScreenResponse'
            },
            type: 'array'
        },
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    required: ['entities', 'id', 'name'],
    type: 'object',
    additionalProperties: false
} as const;

export const IntegrationUserResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        name: {
            type: 'string'
        },
        endpoints: {
            items: {
                type: 'string'
            },
            type: 'array',
            description: 'List of endpoints (operationIds) this user can access'
        },
        lastSeen: {
            type: 'string',
            nullable: true
        }
    },
    required: ['id', 'name', 'endpoints', 'lastSeen'],
    type: 'object',
    additionalProperties: false
} as const;

export const IntegrationUserCreateRequestSchema = {
    properties: {
        name: {
            type: 'string'
        },
        endpoints: {
            items: {
                type: 'string'
            },
            type: 'array',
            description: 'List of endpoints (operationIds) this user can access'
        }
    },
    required: ['name', 'endpoints'],
    type: 'object',
    additionalProperties: false
} as const;

export const IntegrationUserUpdateRequestSchema = {
    properties: {
        name: {
            type: 'string'
        },
        endpoints: {
            items: {
                type: 'string'
            },
            type: 'array',
            description: 'List of endpoints (operationIds) this user can access'
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const OrderSchema = {
    properties: {
        number: {
            type: 'number',
            format: 'double'
        },
        startTime: {
            type: 'string',
            format: 'date-time'
        },
        timeoutSeconds: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['number', 'startTime', 'timeoutSeconds'],
    type: 'object',
    additionalProperties: false
} as const;

export const OrderRequestSchema = {
    properties: {
        orderNumber: {
            type: 'number',
            format: 'double'
        },
        timeoutSeconds: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['orderNumber'],
    type: 'object',
    additionalProperties: false
} as const;

export const CenturionParamsSchema = {
    properties: {
        lightsGroupIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        screenIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        audioIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        centurionName: {
            type: 'string'
        },
        centurionArtist: {
            type: 'string'
        }
    },
    required: ['lightsGroupIds', 'screenIds', 'audioIds', 'centurionName', 'centurionArtist'],
    type: 'object',
    additionalProperties: false
} as const;

export const TimeTrailRaceParamsSchema = {
    properties: {
        lightsGroupIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        screenIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        audioIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        sessionName: {
            type: 'string'
        }
    },
    required: ['lightsGroupIds', 'screenIds', 'audioIds', 'sessionName'],
    type: 'object',
    additionalProperties: false
} as const;

export const TimeTrailRaceStateSchema = {
    enum: ['INITIALIZED', 'PLAYER_REGISTERED', 'PLAYER_READY', 'STARTED', 'FINISHED', 'SCOREBOARD'],
    type: 'string'
} as const;

export const ScoreboardItemSchema = {
    properties: {
        name: {
            type: 'string'
        },
        alcoholFree: {
            type: 'boolean'
        },
        bac: {
            type: 'boolean'
        },
        uuid: {
            type: 'string'
        },
        timeMs: {
            type: 'number',
            format: 'double',
            description: 'Finish time (in ms)'
        }
    },
    required: ['name', 'alcoholFree', 'bac', 'uuid', 'timeMs'],
    type: 'object',
    additionalProperties: false
} as const;

export const RaceBaseEventSchema = {
    properties: {
        sessionName: {
            type: 'string'
        }
    },
    required: ['sessionName'],
    type: 'object'
} as const;

export const TimeTrailRaceState_PLAYER_REGISTEREDSchema = {
    enum: ['PLAYER_REGISTERED'],
    type: 'string'
} as const;

export const PlayerParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        alcoholFree: {
            type: 'boolean'
        },
        bac: {
            type: 'boolean'
        },
        uuid: {
            type: 'string'
        }
    },
    required: ['name', 'alcoholFree', 'bac', 'uuid'],
    type: 'object',
    additionalProperties: false
} as const;

export const RacePlayerRegisteredEventSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/RaceBaseEvent'
        },
        {
            properties: {
                scoreboard: {
                    items: {
                        '$ref': '#/components/schemas/ScoreboardItem'
                    },
                    type: 'array'
                },
                player: {
                    '$ref': '#/components/schemas/PlayerParams'
                },
                state: {
                    '$ref': '#/components/schemas/TimeTrailRaceState.PLAYER_REGISTERED'
                }
            },
            required: ['scoreboard', 'player', 'state'],
            type: 'object'
        }
    ]
} as const;

export const ModeDisabledErrorSchema = {
    properties: {
        name: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        stack: {
            type: 'string'
        }
    },
    required: ['name', 'message'],
    type: 'object',
    additionalProperties: false
} as const;

export const InvalidStateErrorSchema = {
    properties: {
        name: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        stack: {
            type: 'string'
        }
    },
    required: ['name', 'message'],
    type: 'object',
    additionalProperties: false
} as const;

export const RegisterPlayerParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        alcoholFree: {
            type: 'boolean'
        },
        bac: {
            type: 'boolean'
        }
    },
    required: ['name', 'alcoholFree', 'bac'],
    type: 'object',
    additionalProperties: false
} as const;

export const TimeTrailRaceState_PLAYER_READYSchema = {
    enum: ['PLAYER_READY'],
    type: 'string'
} as const;

export const RacePlayerReadyEventSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/RaceBaseEvent'
        },
        {
            properties: {
                player: {
                    '$ref': '#/components/schemas/PlayerParams'
                },
                state: {
                    '$ref': '#/components/schemas/TimeTrailRaceState.PLAYER_READY'
                }
            },
            required: ['player', 'state'],
            type: 'object'
        }
    ]
} as const;

export const TimeTrailRaceState_STARTEDSchema = {
    enum: ['STARTED'],
    type: 'string'
} as const;

export const RaceStartedEventSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/RaceBaseEvent'
        },
        {
            properties: {
                startTime: {
                    type: 'string',
                    format: 'date-time'
                },
                player: {
                    '$ref': '#/components/schemas/PlayerParams'
                },
                state: {
                    '$ref': '#/components/schemas/TimeTrailRaceState.STARTED'
                }
            },
            required: ['startTime', 'player', 'state'],
            type: 'object'
        }
    ]
} as const;

export const TimeTrailRaceState_FINISHEDSchema = {
    enum: ['FINISHED'],
    type: 'string'
} as const;

export const RaceFinishedEventSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/RaceBaseEvent'
        },
        {
            properties: {
                scoreboard: {
                    items: {
                        '$ref': '#/components/schemas/ScoreboardItem'
                    },
                    type: 'array'
                },
                player: {
                    '$ref': '#/components/schemas/ScoreboardItem'
                },
                state: {
                    '$ref': '#/components/schemas/TimeTrailRaceState.FINISHED'
                }
            },
            required: ['scoreboard', 'player', 'state'],
            type: 'object'
        }
    ]
} as const;

export const TimeTrailRaceState_SCOREBOARDSchema = {
    enum: ['SCOREBOARD'],
    type: 'string'
} as const;

export const RaceScoreboardEventSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/RaceBaseEvent'
        },
        {
            properties: {
                player: {
                    '$ref': '#/components/schemas/ScoreboardItem'
                },
                scoreboard: {
                    items: {
                        '$ref': '#/components/schemas/ScoreboardItem'
                    },
                    type: 'array'
                },
                state: {
                    '$ref': '#/components/schemas/TimeTrailRaceState.SCOREBOARD'
                }
            },
            required: ['scoreboard', 'state'],
            type: 'object'
        }
    ]
} as const;

export const CenturionResponseSchema = {
    properties: {
        name: {
            type: 'string'
        },
        startTime: {
            type: 'string',
            format: 'date-time'
        },
        playing: {
            type: 'boolean'
        }
    },
    required: ['name', 'startTime', 'playing'],
    type: 'object',
    additionalProperties: false
} as const;

export const Pick_MixTape_name_or_artist_or_coverUrl_Schema = {
    properties: {
        name: {
            type: 'string'
        },
        artist: {
            type: 'string',
            description: 'Arist and tape name combination should be unique'
        },
        coverUrl: {
            type: 'string',
            description: 'Relative or absolute HTTP path to the cover image'
        }
    },
    required: ['name', 'artist', 'coverUrl'],
    type: 'object',
    description: 'From T, pick a set of properties whose keys are in the union K'
} as const;

export const HornDataSchema = {
    properties: {
        strobeTime: {
            type: 'number',
            format: 'double',
            description: 'Time the lights should strobe in milliseconds'
        },
        counter: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['counter'],
    type: 'object'
} as const;

export const HornEventSchema = {
    properties: {
        type: {
            type: 'string',
            enum: ['horn'],
            nullable: false
        },
        timestamp: {
            type: 'number',
            format: 'double'
        },
        data: {
            '$ref': '#/components/schemas/HornData'
        }
    },
    required: ['type', 'timestamp', 'data'],
    type: 'object',
    additionalProperties: false
} as const;

export const SongDataSchema = {
    properties: {
        bpm: {
            type: 'number',
            format: 'double',
            description: 'Tempo of the song. Defaults to 130 beats per minute'
        },
        title: {
            type: 'string'
        },
        artist: {
            type: 'string',
            description: 'Performing artists, comma-separated if multiple'
        }
    },
    required: ['title', 'artist'],
    type: 'object'
} as const;

export const SongEventSchema = {
    properties: {
        type: {
            type: 'string',
            enum: ['song'],
            nullable: false
        },
        timestamp: {
            type: 'number',
            format: 'double'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SongData'
                },
                {
                    items: {
                        '$ref': '#/components/schemas/SongData'
                    },
                    type: 'array'
                }
            ]
        }
    },
    required: ['type', 'timestamp', 'data'],
    type: 'object',
    additionalProperties: false
} as const;

export const CenturionStateResponseSchema = {
    properties: {
        tape: {
            '$ref': '#/components/schemas/Pick_MixTape.name-or-artist-or-coverUrl_'
        },
        lastHorn: {
            '$ref': '#/components/schemas/HornEvent'
        },
        lastSong: {
            '$ref': '#/components/schemas/SongEvent'
        },
        colors: {
            items: {
                '$ref': '#/components/schemas/RgbColor'
            },
            type: 'array'
        },
        playing: {
            type: 'boolean'
        }
    },
    required: ['playing'],
    type: 'object',
    additionalProperties: false
} as const;

export const SkipCenturionRequestSchema = {
    properties: {
        seconds: {
            type: 'number',
            format: 'double',
            minimum: 0
        }
    },
    required: ['seconds'],
    type: 'object',
    additionalProperties: false
} as const;

export const MixTapeResponseSchema = {
    properties: {
        name: {
            type: 'string'
        },
        artist: {
            type: 'string',
            description: 'Arist and tape name combination should be unique'
        },
        coverUrl: {
            type: 'string',
            description: 'Relative or absolute HTTP path to the cover image'
        },
        events: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/HornEvent'
                    },
                    {
                        '$ref': '#/components/schemas/SongEvent'
                    }
                ]
            },
            type: 'array'
        },
        horns: {
            type: 'number',
            format: 'double',
            description: 'Amount of horns'
        },
        duration: {
            type: 'number',
            format: 'double',
            description: 'Duration of the mix tape'
        }
    },
    required: ['name', 'artist', 'coverUrl', 'events', 'horns', 'duration'],
    type: 'object',
    additionalProperties: false
} as const;

export const FooterSizeSchema = {
    enum: ['full', 'minimal', 'hidden'],
    type: 'string'
} as const;

export const BasePosterSchema = {
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        label: {
            type: 'string'
        },
        due: {
            type: 'string',
            format: 'date-time'
        },
        timeout: {
            type: 'number',
            format: 'double'
        },
        footer: {
            '$ref': '#/components/schemas/FooterSize'
        },
        borrelMode: {
            type: 'boolean',
            description: 'Whether this poster should only be shown when in BorrelMode'
        },
        color: {
            type: 'string'
        }
    },
    required: ['id', 'name', 'label', 'timeout', 'footer'],
    type: 'object',
    additionalProperties: false
} as const;

export const PosterType_AGENDASchema = {
    enum: ['agenda'],
    type: 'string'
} as const;

export const PosterType_INFIMASchema = {
    enum: ['infima'],
    type: 'string'
} as const;

export const PosterType_LOGOSchema = {
    enum: ['logo'],
    type: 'string'
} as const;

export const PosterType_TRAINSSchema = {
    enum: ['train'],
    type: 'string'
} as const;

export const PosterType_BORREL_LOGOSchema = {
    enum: ['borrel-logo'],
    type: 'string'
} as const;

export const PosterType_BORREL_PRICE_LISTSchema = {
    enum: ['borrel-price-list'],
    type: 'string'
} as const;

export const PosterType_BORREL_WALL_OF_SHAMESchema = {
    enum: ['borrel-wall-of-shame'],
    type: 'string'
} as const;

export const PosterType_OLYMPICSSchema = {
    enum: ['olympics'],
    type: 'string'
} as const;

export const PosterType_UNKNOWNSchema = {
    enum: ['unknown'],
    type: 'string'
} as const;

export const LocalPosterTypeSchema = {
    anyOf: [
        {
            '$ref': '#/components/schemas/PosterType.AGENDA'
        },
        {
            '$ref': '#/components/schemas/PosterType.INFIMA'
        },
        {
            '$ref': '#/components/schemas/PosterType.LOGO'
        },
        {
            '$ref': '#/components/schemas/PosterType.TRAINS'
        },
        {
            '$ref': '#/components/schemas/PosterType.BORREL_LOGO'
        },
        {
            '$ref': '#/components/schemas/PosterType.BORREL_PRICE_LIST'
        },
        {
            '$ref': '#/components/schemas/PosterType.BORREL_WALL_OF_SHAME'
        },
        {
            '$ref': '#/components/schemas/PosterType.OLYMPICS'
        },
        {
            '$ref': '#/components/schemas/PosterType.UNKNOWN'
        }
    ]
} as const;

export const LocalPosterSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BasePoster'
        },
        {
            properties: {
                type: {
                    '$ref': '#/components/schemas/LocalPosterType'
                }
            },
            required: ['type'],
            type: 'object'
        }
    ]
} as const;

export const PosterType_IMAGESchema = {
    enum: ['img'],
    type: 'string'
} as const;

export const PosterType_VIDEOSchema = {
    enum: ['video'],
    type: 'string'
} as const;

export const PosterType_EXTERNALSchema = {
    enum: ['extern'],
    type: 'string'
} as const;

export const MediaPosterSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BasePoster'
        },
        {
            properties: {
                source: {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                type: {
                    anyOf: [
                        {
                            '$ref': '#/components/schemas/PosterType.IMAGE'
                        },
                        {
                            '$ref': '#/components/schemas/PosterType.VIDEO'
                        },
                        {
                            '$ref': '#/components/schemas/PosterType.EXTERNAL'
                        }
                    ]
                }
            },
            required: ['source', 'type'],
            type: 'object'
        }
    ]
} as const;

export const PosterType_PHOTOSchema = {
    enum: ['photo'],
    type: 'string'
} as const;

export const PhotoPosterSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BasePoster'
        },
        {
            properties: {
                albums: {
                    items: {
                        type: 'number',
                        format: 'double'
                    },
                    type: 'array'
                },
                type: {
                    '$ref': '#/components/schemas/PosterType.PHOTO'
                }
            },
            required: ['albums', 'type'],
            type: 'object'
        }
    ]
} as const;

export const PosterType_ERRORSchema = {
    enum: ['error'],
    type: 'string'
} as const;

export const ErrorPosterSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BasePoster'
        },
        {
            properties: {
                message: {
                    type: 'string'
                },
                type: {
                    '$ref': '#/components/schemas/PosterType.ERROR'
                }
            },
            required: ['message', 'type'],
            type: 'object'
        }
    ]
} as const;

export const PosterSchema = {
    anyOf: [
        {
            '$ref': '#/components/schemas/LocalPoster'
        },
        {
            '$ref': '#/components/schemas/MediaPoster'
        },
        {
            '$ref': '#/components/schemas/PhotoPoster'
        },
        {
            '$ref': '#/components/schemas/ErrorPoster'
        }
    ]
} as const;

export const PosterResponseSchema = {
    properties: {
        posters: {
            items: {
                '$ref': '#/components/schemas/Poster'
            },
            type: 'array'
        },
        borrelMode: {
            type: 'boolean'
        }
    },
    required: ['posters', 'borrelMode'],
    type: 'object',
    additionalProperties: false
} as const;

export const BorrelModeResponseSchema = {
    properties: {
        enabled: {
            type: 'boolean'
        },
        present: {
            type: 'boolean'
        }
    },
    required: ['enabled', 'present'],
    type: 'object',
    additionalProperties: false
} as const;

export const BorrelModeParamsSchema = {
    properties: {
        enabled: {
            type: 'boolean'
        }
    },
    required: ['enabled'],
    type: 'object',
    additionalProperties: false
} as const;

export const TrainResponseSchema = {
    properties: {
        direction: {
            type: 'string'
        },
        plannedDateTime: {
            type: 'string'
        },
        delay: {
            type: 'number',
            format: 'double'
        },
        trainType: {
            type: 'string'
        },
        operator: {
            type: 'string'
        },
        cancelled: {
            type: 'boolean'
        },
        routeStations: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        messages: {
            items: {
                properties: {
                    message: {
                        type: 'string'
                    },
                    style: {
                        type: 'string'
                    }
                },
                required: ['message', 'style'],
                type: 'object'
            },
            type: 'array'
        }
    },
    required: ['direction', 'plannedDateTime', 'delay', 'trainType', 'operator', 'cancelled', 'routeStations', 'messages'],
    type: 'object',
    additionalProperties: false
} as const;

export const PhotoResponseSchema = {
    properties: {
        label: {
            type: 'string'
        },
        url: {
            type: 'string'
        }
    },
    required: ['label', 'url'],
    type: 'object',
    additionalProperties: false
} as const;

export const GEWISPhotoAlbumParamsSchema = {
    properties: {
        albumIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        }
    },
    required: ['albumIds'],
    type: 'object',
    additionalProperties: false
} as const;

export const MedalTableRecordSchema = {
    properties: {
        countryName: {
            type: 'string'
        },
        flagUrl: {
            type: 'string'
        },
        rank: {
            type: 'number',
            format: 'double'
        },
        gold: {
            type: 'number',
            format: 'double'
        },
        silver: {
            type: 'number',
            format: 'double'
        },
        bronze: {
            type: 'number',
            format: 'double'
        },
        total: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['countryName', 'flagUrl', 'gold', 'silver', 'bronze', 'total'],
    type: 'object',
    additionalProperties: false
} as const;

export const OlympicMedalSchema = {
    properties: {
        participantId: {
            type: 'number',
            format: 'double'
        },
        eventId: {
            type: 'number',
            format: 'double'
        },
        participantName: {
            type: 'string'
        },
        sportName: {
            type: 'string'
        },
        eventName: {
            type: 'string'
        },
        medal: {
            type: 'string',
            enum: ['gold', 'silver', 'bronze']
        }
    },
    required: ['participantId', 'eventId', 'participantName', 'sportName', 'eventName', 'medal'],
    type: 'object',
    additionalProperties: false
} as const;

export const CountryMedalResponseSchema = {
    properties: {
        countryName: {
            type: 'string'
        },
        flagUrl: {
            type: 'string'
        },
        rank: {
            type: 'number',
            format: 'double'
        },
        gold: {
            type: 'number',
            format: 'double'
        },
        silver: {
            type: 'number',
            format: 'double'
        },
        bronze: {
            type: 'number',
            format: 'double'
        },
        total: {
            type: 'number',
            format: 'double'
        },
        medals: {
            items: {
                '$ref': '#/components/schemas/OlympicMedal'
            },
            type: 'array'
        }
    },
    required: ['countryName', 'flagUrl', 'gold', 'silver', 'bronze', 'total', 'medals'],
    type: 'object',
    additionalProperties: false
} as const;

export const PosterScreenSettingsResponseSchema = {
    properties: {
        defaultMinimal: {
            type: 'boolean'
        },
        defaultProgressBarColor: {
            '$ref': '#/components/schemas/HexColor'
        },
        progressBarLogo: {
            type: 'boolean'
        },
        stylesheet: {
            type: 'boolean'
        },
        clockShouldTick: {
            type: 'boolean'
        }
    },
    required: ['defaultMinimal', 'defaultProgressBarColor', 'progressBarLogo', 'stylesheet', 'clockShouldTick'],
    type: 'object',
    additionalProperties: false
} as const;

export const FileResponseSchema = {
    properties: {
        location: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    required: ['location', 'name'],
    type: 'object',
    additionalProperties: false
} as const;

export const LocalPosterResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string'
        },
        updatedAt: {
            type: 'string'
        },
        file: {
            '$ref': '#/components/schemas/FileResponse'
        },
        uri: {
            type: 'string'
        }
    },
    required: ['id', 'createdAt', 'updatedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const StaticPosterHandlerStateSchema = {
    properties: {
        activePoster: {
            allOf: [
                {
                    '$ref': '#/components/schemas/LocalPosterResponse'
                }
            ],
            nullable: true
        },
        clockVisible: {
            type: 'boolean'
        }
    },
    required: ['activePoster', 'clockVisible'],
    type: 'object',
    additionalProperties: false
} as const;

export const SetClockRequestSchema = {
    properties: {
        visible: {
            type: 'boolean'
        }
    },
    required: ['visible'],
    type: 'object',
    additionalProperties: false
} as const;

export const BaseLightsEffectCreateParamsSchema = {
    properties: {},
    type: 'object'
} as const;

export const ColorEffects_BackgroundPulseSchema = {
    enum: ['BackgroundPulse'],
    type: 'string'
} as const;

export const BackgroundPulsePropsSchema = {
    properties: {
        colors: {
            items: {
                '$ref': '#/components/schemas/RgbColor'
            },
            type: 'array',
            description: 'One or more colors that should be shown'
        },
        ratio: {
            type: 'number',
            format: 'double',
            description: 'What percentage (on average) of the lights should be turned on',
            minimum: 0,
            maximum: 1
        },
        pulseDuration: {
            type: 'integer',
            format: 'int32',
            description: 'How many ms the lights should take to turn on and aff',
            minimum: 1
        },
        cycleTime: {
            type: 'integer',
            format: 'int32',
            description: 'After how many ms (approximately) a ratio of lights should start pulsing.',
            minimum: 0
        }
    },
    required: ['colors'],
    type: 'object',
    additionalProperties: false
} as const;

export const BackgroundPulseCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/BackgroundPulseProps'
                },
                type: {
                    '$ref': '#/components/schemas/ColorEffects.BackgroundPulse'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const ColorEffects_BeatFadeOutSchema = {
    enum: ['BeatFadeOut'],
    type: 'string'
} as const;

export const LightsEffectPatternSchema = {
    enum: ['horizontal', 'vertical', 'diagonal_bottom_left_to_top_right', 'diagonal_top_left_to_bottom_right', 'centered_circular', 'centered_squared', 'rotational'],
    type: 'string'
} as const;

export const LightsEffectDirectionSchema = {
    enum: ['forwards', 'backwards'],
    type: 'string'
} as const;

export const BeatFadeOutPropsSchema = {
    properties: {
        colors: {
            items: {
                '$ref': '#/components/schemas/RgbColor'
            },
            type: 'array',
            description: 'One or more colors that should be shown'
        },
        pattern: {
            '$ref': '#/components/schemas/LightsEffectPattern',
            description: '2D pattern for this effect. Defaults to "HORIZONTAL"'
        },
        direction: {
            '$ref': '#/components/schemas/LightsEffectDirection',
            description: 'Direction of this effect. Defaults to "FORWARDS"'
        },
        enableFade: {
            type: 'boolean',
            description: `Whether the lights should be turned off using a fade effect
on each beat`
        },
        nrBlacks: {
            type: 'integer',
            format: 'int32',
            description: 'How many "black" fixtures should be added. Zero for no blacks',
            minimum: 0
        },
        customCycleTime: {
            type: 'integer',
            format: 'int32',
            description: `Amount of time it takes before the lights switch to the next state (in ms). If undefined,
beats will be used for switching states`,
            minimum: 0
        }
    },
    required: ['colors'],
    type: 'object',
    additionalProperties: false
} as const;

export const BeatFadeOutCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/BeatFadeOutProps'
                },
                type: {
                    '$ref': '#/components/schemas/ColorEffects.BeatFadeOut'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const FirePropsSchema = {
    properties: {},
    type: 'object',
    additionalProperties: false
} as const;

export const FireCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/FireProps'
                },
                type: {
                    type: 'string',
                    enum: ['Fire'],
                    nullable: false
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const ColorEffects_RandomColorSchema = {
    enum: ['RandomColor'],
    type: 'string'
} as const;

export const RandomColorPropsSchema = {
    properties: {
        colors: {
            items: {
                '$ref': '#/components/schemas/RgbColor'
            },
            type: 'array',
            description: 'One or more colors that should be shown'
        },
        nrBlacks: {
            type: 'integer',
            format: 'int32',
            description: 'How many "black" fixtures should be added. Zero for no blacks',
            minimum: 0
        },
        customCycleTime: {
            type: 'integer',
            format: 'int32',
            description: `Amount of time it takes before the lights switch to the next state (in ms). If undefined,
beats will be used for switching states`,
            minimum: 0
        }
    },
    required: ['colors'],
    type: 'object',
    additionalProperties: false
} as const;

export const RandomColorCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/RandomColorProps'
                },
                type: {
                    '$ref': '#/components/schemas/ColorEffects.RandomColor'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const ColorEffects_SingleFloodSchema = {
    enum: ['SingleFlood'],
    type: 'string'
} as const;

export const SingleFloodPropsSchema = {
    properties: {
        color: {
            '$ref': '#/components/schemas/RgbColor',
            description: 'The flood color, warm white/orange/yellow by default'
        },
        dimMilliseconds: {
            type: 'integer',
            format: 'int32',
            description: 'In how many milliseconds the lights should turn off with a dim effect',
            minimum: 0
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const SingleFloodCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/SingleFloodProps'
                },
                type: {
                    '$ref': '#/components/schemas/ColorEffects.SingleFlood'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const ColorEffects_SparkleSchema = {
    enum: ['Sparkle'],
    type: 'string'
} as const;

export const SparklePropsSchema = {
    properties: {
        colors: {
            items: {
                '$ref': '#/components/schemas/RgbColor'
            },
            type: 'array',
            description: 'One or more colors that should be shown'
        },
        ratio: {
            type: 'number',
            format: 'double',
            description: 'What percentage (on average) of the lights should be turned on',
            minimum: 0,
            maximum: 1
        },
        dimDuration: {
            type: 'integer',
            format: 'int32',
            description: 'How many ms the light should take to slowly turn off',
            minimum: 1
        },
        cycleTime: {
            type: 'integer',
            format: 'int32',
            description: `After how many ms (approximately) a ratio of lights should be turned on.
Defaults to 0, which enables the ratio of lights on the beat of the music.`,
            minimum: 0
        }
    },
    required: ['colors'],
    type: 'object',
    additionalProperties: false
} as const;

export const SparkleCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/SparkleProps'
                },
                type: {
                    '$ref': '#/components/schemas/ColorEffects.Sparkle'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const ColorEffects_StaticColorSchema = {
    enum: ['StaticColor'],
    type: 'string'
} as const;

export const StaticColorPropsSchema = {
    properties: {
        color: {
            '$ref': '#/components/schemas/RgbColor',
            description: 'Color that should be shown'
        },
        gobo: {
            type: 'string',
            description: 'Name of the gobo that should be used (nothing by default)'
        },
        goboRotate: {
            type: 'string',
            description: 'Name of the gobo rotate that should be used (nothing by default)'
        },
        beatToggle: {
            type: 'boolean',
            description: 'Whether to toggle each fixture on/off on the beat of the music (false by default)'
        },
        relativeBrightness: {
            type: 'integer',
            format: 'int32',
            description: 'Brightness (1 by default)',
            minimum: 0,
            maximum: 1
        },
        brightenTimeMs: {
            type: 'number',
            format: 'double',
            description: `In how many ms the fixture should light up to the relativeBrightness on effect start.
Disabled if undefined`
        },
        dimTimeMs: {
            type: 'number',
            format: 'double',
            description: `In how many ms the fixture should dim from the relativeBrightness on effect start.
Disabled if undefined or if brightenTimeMs is not undefined`
        }
    },
    required: ['color'],
    type: 'object',
    additionalProperties: false
} as const;

export const StaticColorCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/StaticColorProps'
                },
                type: {
                    '$ref': '#/components/schemas/ColorEffects.StaticColor'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const ColorEffects_StrobeSchema = {
    enum: ['Strobe'],
    type: 'string'
} as const;

export const StrobeCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/StrobeProps'
                },
                type: {
                    '$ref': '#/components/schemas/ColorEffects.Strobe'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const ColorEffects_WaveSchema = {
    enum: ['Wave'],
    type: 'string'
} as const;

export const WavePropsSchema = {
    properties: {
        colors: {
            items: {
                '$ref': '#/components/schemas/RgbColor'
            },
            type: 'array',
            description: 'One or more colors that should be shown'
        },
        pattern: {
            '$ref': '#/components/schemas/LightsEffectPattern',
            description: '2D pattern for this effect. Defaults to "HORIZONTAL"'
        },
        direction: {
            '$ref': '#/components/schemas/LightsEffectDirection',
            description: 'Direction of this effect. Defaults to "FORWARDS"'
        },
        nrWaves: {
            type: 'integer',
            format: 'int32',
            description: 'Number of waves, ignored if singleWave=true (1 by default)',
            minimum: 1
        },
        cycleTime: {
            type: 'integer',
            format: 'int32',
            description: 'How many ms each cycle of the wave takes (1000ms by default)',
            minimum: 0
        },
        singleWave: {
            type: 'boolean',
            description: `Whether the animation should only be executed once from start to finish
instead of a continuous animation (false by default)`
        }
    },
    required: ['colors'],
    type: 'object',
    additionalProperties: false
} as const;

export const WaveCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/WaveProps'
                },
                type: {
                    '$ref': '#/components/schemas/ColorEffects.Wave'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const LightsEffectsColorCreateParamsSchema = {
    anyOf: [
        {
            '$ref': '#/components/schemas/BackgroundPulseCreateParams'
        },
        {
            '$ref': '#/components/schemas/BeatFadeOutCreateParams'
        },
        {
            '$ref': '#/components/schemas/FireCreateParams'
        },
        {
            '$ref': '#/components/schemas/RandomColorCreateParams'
        },
        {
            '$ref': '#/components/schemas/SingleFloodCreateParams'
        },
        {
            '$ref': '#/components/schemas/SparkleCreateParams'
        },
        {
            '$ref': '#/components/schemas/StaticColorCreateParams'
        },
        {
            '$ref': '#/components/schemas/StrobeCreateParams'
        },
        {
            '$ref': '#/components/schemas/WaveCreateParams'
        }
    ]
} as const;

export const ColorsRequestSchema = {
    properties: {
        colors: {
            items: {
                '$ref': '#/components/schemas/RgbColor'
            },
            type: 'array'
        }
    },
    required: ['colors'],
    type: 'object',
    additionalProperties: false
} as const;

export const MovementEffects_SearchLightSchema = {
    enum: ['SearchLight'],
    type: 'string'
} as const;

export const SearchLightPropsSchema = {
    properties: {
        cycleTime: {
            type: 'integer',
            format: 'int32',
            description: 'Time for the moving head to go around (in milliseconds)',
            minimum: 0
        },
        offsetFactor: {
            type: 'number',
            format: 'double',
            description: 'What phase the lights should move apart from each other. 0 for synchronous'
        },
        pattern: {
            '$ref': '#/components/schemas/LightsEffectPattern',
            description: '2D pattern for this effect. Defaults to "HORIZONTAL"'
        },
        direction: {
            '$ref': '#/components/schemas/LightsEffectDirection',
            description: 'Direction of this effect. Defaults to "FORWARDS"'
        },
        radiusFactor: {
            type: 'number',
            format: 'double',
            description: 'Radius of the search light',
            minimum: 0,
            maximum: 2
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const SearchLightCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/SearchLightProps'
                },
                type: {
                    '$ref': '#/components/schemas/MovementEffects.SearchLight'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const MovementEffects_TableRotateSchema = {
    enum: ['TableRotate'],
    type: 'string'
} as const;

export const TableRotatePropsSchema = {
    properties: {
        cycleTime: {
            type: 'integer',
            format: 'int32',
            description: 'Time for the moving head to go around (in milliseconds)',
            minimum: 0
        },
        offsetFactor: {
            type: 'number',
            format: 'double',
            description: 'What phase the lights should move apart from each other. 0 for synchronous'
        },
        pattern: {
            '$ref': '#/components/schemas/LightsEffectPattern',
            description: '2D pattern for this effect. Defaults to "HORIZONTAL"'
        },
        direction: {
            '$ref': '#/components/schemas/LightsEffectDirection',
            description: 'Direction of this effect. Defaults to "FORWARDS"'
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const TableRotateCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/TableRotateProps'
                },
                type: {
                    '$ref': '#/components/schemas/MovementEffects.TableRotate'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const MovementEffects_ClassicRotateSchema = {
    enum: ['ClassicRotate'],
    type: 'string'
} as const;

export const ClassicRotatePropsSchema = {
    properties: {
        cycleTime: {
            type: 'integer',
            format: 'int32',
            description: 'Time for the moving head to go around (in milliseconds)',
            minimum: 0
        },
        offsetFactor: {
            type: 'number',
            format: 'double',
            description: 'What phase the lights should move apart from each other. 0 for synchronous'
        },
        pattern: {
            '$ref': '#/components/schemas/LightsEffectPattern',
            description: '2D pattern for this effect. Defaults to "HORIZONTAL"'
        },
        direction: {
            '$ref': '#/components/schemas/LightsEffectDirection',
            description: 'Direction of this effect. Defaults to "FORWARDS"'
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const ClassicRotateCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/ClassicRotateProps'
                },
                type: {
                    '$ref': '#/components/schemas/MovementEffects.ClassicRotate'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const MovementEffects_RandomPositionSchema = {
    enum: ['RandomPosition'],
    type: 'string'
} as const;

export const RandomPositionPropsSchema = {
    properties: {
        beatsToMove: {
            type: 'integer',
            format: 'int32',
            description: 'After how many beats the light will move to a new position',
            minimum: 0
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const RandomPositionCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/RandomPositionProps'
                },
                type: {
                    '$ref': '#/components/schemas/MovementEffects.RandomPosition'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const MovementEffects_FixedPositionSchema = {
    enum: ['FixedPosition'],
    type: 'string'
} as const;

export const FixedPositionPropsAbsSchema = {
    properties: {
        tilt: {
            type: 'number',
            format: 'double',
            description: 'Relative tilt value of the moving heads. Any decimals are applied to the fineTilt if it exists.',
            minimum: 0,
            maximum: 256
        },
        pan: {
            type: 'number',
            format: 'double',
            description: 'Absolute pan value of the moving heads. Any decimals are applied to the finePan if it exists.',
            minimum: 0,
            maximum: 256
        },
        variant: {
            type: 'string',
            enum: ['Absolute'],
            nullable: false
        }
    },
    required: ['tilt', 'pan', 'variant'],
    type: 'object'
} as const;

export const FixedPositionPropsRelSchema = {
    properties: {
        tilt: {
            type: 'number',
            format: 'double',
            description: 'Relative tilt value of the moving heads. Any decimals are applied to the fineTilt if it exists.',
            minimum: 0,
            maximum: 1
        },
        pan: {
            type: 'number',
            format: 'double',
            description: 'Relative pan value of the moving heads. Any decimals are applied to the finePan if it exists.',
            minimum: 0,
            maximum: 1
        },
        variant: {
            type: 'string',
            enum: ['Relative'],
            nullable: false
        }
    },
    required: ['tilt', 'pan', 'variant'],
    type: 'object'
} as const;

export const FixedPositionPropsSchema = {
    anyOf: [
        {
            '$ref': '#/components/schemas/FixedPositionPropsAbs'
        },
        {
            '$ref': '#/components/schemas/FixedPositionPropsRel'
        }
    ]
} as const;

export const FixedPositionCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/FixedPositionProps'
                },
                type: {
                    '$ref': '#/components/schemas/MovementEffects.FixedPosition'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const MovementEffects_ZigZagSchema = {
    enum: ['ZigZag'],
    type: 'string'
} as const;

export const ZigZagPropsSchema = {
    properties: {
        cycleTime: {
            type: 'integer',
            format: 'int32',
            description: 'Time for the moving head to go around (in milliseconds)',
            minimum: 0
        },
        offsetFactor: {
            type: 'number',
            format: 'double',
            description: 'What phase the lights should move apart from each other. 0 for synchronous'
        },
        pattern: {
            '$ref': '#/components/schemas/LightsEffectPattern',
            description: '2D pattern for this effect. Defaults to "HORIZONTAL"'
        },
        direction: {
            '$ref': '#/components/schemas/LightsEffectDirection',
            description: 'Direction of this effect. Defaults to "FORWARDS"'
        },
        horizontalRadius: {
            type: 'number',
            format: 'double',
            description: 'How much the moving head should pan to the left and right'
        },
        verticalRadius: {
            type: 'number',
            format: 'double',
            description: 'How much the moving head should tilt up and down'
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const ZigZagCreateParamsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseLightsEffectCreateParams'
        },
        {
            properties: {
                props: {
                    '$ref': '#/components/schemas/ZigZagProps'
                },
                type: {
                    '$ref': '#/components/schemas/MovementEffects.ZigZag'
                }
            },
            required: ['props', 'type'],
            type: 'object'
        }
    ]
} as const;

export const LightsEffectsMovementCreateParamsSchema = {
    anyOf: [
        {
            '$ref': '#/components/schemas/SearchLightCreateParams'
        },
        {
            '$ref': '#/components/schemas/TableRotateCreateParams'
        },
        {
            '$ref': '#/components/schemas/ClassicRotateCreateParams'
        },
        {
            '$ref': '#/components/schemas/RandomPositionCreateParams'
        },
        {
            '$ref': '#/components/schemas/FixedPositionCreateParams'
        },
        {
            '$ref': '#/components/schemas/ZigZagCreateParams'
        }
    ]
} as const;

export const LightsButtonColorsSchema = {
    properties: {
        lightsGroupIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array',
            description: 'Lights groups to which these colors should be immediately applied to'
        },
        colors: {
            items: {
                '$ref': '#/components/schemas/RgbColor'
            },
            type: 'array'
        },
        type: {
            type: 'string',
            enum: ['LightsButtonColors'],
            nullable: false
        }
    },
    required: ['colors', 'type'],
    type: 'object'
} as const;

export const LightsButtonEffectColorSchema = {
    properties: {
        lightsGroupIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        effectProps: {
            '$ref': '#/components/schemas/LightsEffectsColorCreateParams'
        },
        type: {
            type: 'string',
            enum: ['LightsButtonEffectColor'],
            nullable: false
        }
    },
    required: ['lightsGroupIds', 'effectProps', 'type'],
    type: 'object'
} as const;

export const LightsButtonEffectMovementSchema = {
    properties: {
        lightsGroupIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        effectProps: {
            '$ref': '#/components/schemas/LightsEffectsMovementCreateParams'
        },
        type: {
            type: 'string',
            enum: ['LightsButtonEffectMovement'],
            nullable: false
        }
    },
    required: ['lightsGroupIds', 'effectProps', 'type'],
    type: 'object'
} as const;

export const LightsButtonResetSchema = {
    properties: {
        lightsGroupIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        type: {
            type: 'string',
            enum: ['LightsButtonReset'],
            nullable: false
        }
    },
    required: ['lightsGroupIds', 'type'],
    type: 'object'
} as const;

export const LightsButtonSwitchSchema = {
    properties: {
        switchIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        type: {
            type: 'string',
            enum: ['LightsButtonSwitch'],
            nullable: false
        }
    },
    required: ['switchIds', 'type'],
    type: 'object'
} as const;

export const LightsButtonStrobeSchema = {
    properties: {
        lightsGroupIds: {
            items: {
                type: 'number',
                format: 'double'
            },
            type: 'array'
        },
        type: {
            type: 'string',
            enum: ['LightsButtonStrobe'],
            nullable: false
        }
    },
    required: ['lightsGroupIds', 'type'],
    type: 'object'
} as const;

export const LightsButtonNullSchema = {
    properties: {
        type: {
            type: 'string',
            enum: ['LightsButtonNull'],
            nullable: false
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const LightsPredefinedEffectPropertiesSchema = {
    anyOf: [
        {
            '$ref': '#/components/schemas/LightsButtonColors'
        },
        {
            '$ref': '#/components/schemas/LightsButtonEffectColor'
        },
        {
            '$ref': '#/components/schemas/LightsButtonEffectMovement'
        },
        {
            '$ref': '#/components/schemas/LightsButtonReset'
        },
        {
            '$ref': '#/components/schemas/LightsButtonSwitch'
        },
        {
            '$ref': '#/components/schemas/LightsButtonStrobe'
        },
        {
            '$ref': '#/components/schemas/LightsButtonNull'
        }
    ]
} as const;

export const LightsPredefinedEffectResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string'
        },
        updatedAt: {
            type: 'string'
        },
        buttonId: {
            type: 'number',
            format: 'double'
        },
        icon: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        properties: {
            '$ref': '#/components/schemas/LightsPredefinedEffectProperties'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'buttonId', 'properties'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsPredefinedEffectCreateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        buttonId: {
            type: 'number',
            format: 'double'
        },
        properties: {
            '$ref': '#/components/schemas/LightsPredefinedEffectProperties'
        },
        icon: {
            type: 'string'
        }
    },
    required: ['buttonId', 'properties'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsPredefinedEffectUpdateParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        buttonId: {
            type: 'number',
            format: 'double'
        },
        properties: {
            '$ref': '#/components/schemas/LightsPredefinedEffectProperties'
        },
        icon: {
            type: 'string'
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const BaseLightsGroupResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        name: {
            type: 'string'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'name'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsSceneEffectResponseSchema = {
    properties: {
        effectName: {
            type: 'string'
        },
        lightsGroups: {
            items: {
                '$ref': '#/components/schemas/BaseLightsGroupResponse'
            },
            type: 'array'
        }
    },
    required: ['effectName', 'lightsGroups'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsSceneResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        name: {
            type: 'string'
        },
        favorite: {
            type: 'boolean'
        },
        effects: {
            items: {
                '$ref': '#/components/schemas/LightsSceneEffectResponse'
            },
            type: 'array'
        }
    },
    required: ['id', 'name', 'favorite', 'effects'],
    type: 'object',
    additionalProperties: false
} as const;

export const LightsSceneEffectParamsSchema = {
    allOf: [
        {
            properties: {
                lightsGroups: {
                    items: {
                        type: 'number',
                        format: 'double'
                    },
                    type: 'array'
                }
            },
            required: ['lightsGroups'],
            type: 'object'
        },
        {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LightsEffectsColorCreateParams'
                },
                {
                    '$ref': '#/components/schemas/LightsEffectsMovementCreateParams'
                }
            ]
        }
    ]
} as const;

export const CreateSceneParamsSchema = {
    properties: {
        name: {
            type: 'string'
        },
        favorite: {
            type: 'boolean'
        },
        effects: {
            items: {
                '$ref': '#/components/schemas/LightsSceneEffectParams'
            },
            type: 'array'
        }
    },
    required: ['name', 'favorite', 'effects'],
    type: 'object',
    additionalProperties: false
} as const;

export const AuditLogEntryResponseSchema = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        userId: {
            type: 'string'
        },
        userName: {
            type: 'string'
        },
        action: {
            type: 'string'
        }
    },
    required: ['id', 'createdAt', 'updatedAt', 'userId', 'userName', 'action'],
    type: 'object',
    additionalProperties: false
} as const;

export const PersonalDataResponseSchema = {
    properties: {
        userId: {
            type: 'string'
        },
        auditLogs: {
            items: {
                '$ref': '#/components/schemas/AuditLogEntryResponse'
            },
            type: 'array'
        }
    },
    required: ['userId', 'auditLogs'],
    type: 'object',
    additionalProperties: false
} as const;

export const ArtificialBeatGeneratorParamsSchema = {
    properties: {
        bpm: {
            type: 'number',
            format: 'double',
            description: 'Beats per minute',
            minimum: 1
        }
    },
    required: ['bpm'],
    type: 'object',
    additionalProperties: false
} as const;

export const SecurityGroupSchema = {
    enum: ['admin', 'board', 'key-holder', 'bac', 'avico', 'screen-subscriber', 'audio-subscriber', 'lights-subscriber', 'integration-user'],
    type: 'string'
} as const;

export const AuthUserSchema = {
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        roles: {
            items: {
                '$ref': '#/components/schemas/SecurityGroup'
            },
            type: 'array'
        },
        endpoints: {
            items: {
                type: 'string'
            },
            type: 'array',
            description: 'List of accessible endpoints if integration user'
        },
        audioId: {
            type: 'number',
            format: 'double'
        },
        lightsControllerId: {
            type: 'number',
            format: 'double'
        },
        screenId: {
            type: 'number',
            format: 'double'
        },
        integrationUserId: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['id', 'name', 'roles'],
    type: 'object',
    additionalProperties: false
} as const;

export const HttpApiExceptionSchema = {
    properties: {
        name: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        stack: {
            type: 'string'
        },
        statusCode: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['name', 'message', 'statusCode'],
    type: 'object',
    additionalProperties: false
} as const;

export const OidcConfigSchema = {
    description: `The OidcConfig contains the details needed to authenticate with keycloak
These variables are based on the environment variables, and might differ
from system to system.`,
    properties: {
        clientId: {
            type: 'string',
            description: 'The client id of the keycloak application'
        },
        redirectUri: {
            type: 'string',
            description: 'The redirect uri of the keycloak application'
        },
        authUrl: {
            type: 'string',
            description: 'The auth url of the keycloak application'
        }
    },
    required: ['clientId', 'redirectUri', 'authUrl'],
    type: 'object',
    additionalProperties: false
} as const;

export const ISecuritySectionsSchema = {
    properties: {
        base: {
            items: {
                '$ref': '#/components/schemas/SecurityGroup'
            },
            type: 'array'
        },
        privileged: {
            items: {
                '$ref': '#/components/schemas/SecurityGroup'
            },
            type: 'array'
        },
        subscriber: {
            items: {
                '$ref': '#/components/schemas/SecurityGroup'
            },
            type: 'array'
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const ISecurityGroupsSchema = {
    properties: {
        user: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        audit: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        beats: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        gdrp: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        scenes: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        effects: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        poster: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        roomresponsible: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        centurion: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        timetrail: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        mode: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        handler: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        audio: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        light: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        screen: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        lightOperation: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        spotify: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        sudosos: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        serverSettings: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        orders: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        timedEvents: {
            '$ref': '#/components/schemas/ISecuritySections'
        },
        integrationUsers: {
            '$ref': '#/components/schemas/ISecuritySections'
        }
    },
    required: ['user', 'audit', 'beats', 'gdrp', 'scenes', 'effects', 'poster', 'roomresponsible', 'centurion', 'timetrail', 'mode', 'handler', 'audio', 'light', 'screen', 'lightOperation', 'spotify', 'sudosos', 'serverSettings', 'orders', 'timedEvents', 'integrationUsers'],
    type: 'object',
    additionalProperties: false
} as const;

export const PaginatedAuditLogEntryResponseSchema = {
    properties: {
        records: {
            items: {
                '$ref': '#/components/schemas/AuditLogEntryResponse'
            },
            type: 'array'
        },
        pagination: {
            properties: {
                count: {
                    type: 'number',
                    format: 'double'
                },
                skip: {
                    type: 'number',
                    format: 'double'
                },
                take: {
                    type: 'number',
                    format: 'double'
                }
            },
            required: ['count', 'skip', 'take'],
            type: 'object'
        }
    },
    required: ['records', 'pagination'],
    type: 'object',
    additionalProperties: false
} as const;

export const GetAuditLogEntryParamsSchema = {
    properties: {
        userId: {
            type: 'string',
            description: 'Id of the user'
        },
        action: {
            type: 'string',
            description: 'Actions'
        },
        order: {
            type: 'string',
            enum: ['ASC', 'DESC'],
            description: 'In what order to return the logs. DESC by default (newest first)'
        },
        take: {
            type: 'integer',
            format: 'int32',
            description: 'Pagination take',
            minimum: 0
        },
        skip: {
            type: 'integer',
            format: 'int32',
            description: 'Pagination skip',
            minimum: 0
        }
    },
    type: 'object',
    additionalProperties: false
} as const;

export const OidcParametersSchema = {
    type: 'object',
    properties: {
        state: {
            type: 'string'
        },
        session_state: {
            type: 'string'
        },
        code: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const ApiKeyParametersSchema = {
    type: 'object',
    required: ['key'],
    properties: {
        key: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;