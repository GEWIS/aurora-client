// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetAllTimedEventsData, GetAllTimedEventsResponse, CreateTimedEventData, CreateTimedEventResponse, DeleteTimedEventData, DeleteTimedEventResponse, GetSingleTimedEventData, GetSingleTimedEventResponse, UpdateTimedEventData, UpdateTimedEventResponse, GetSudoSosWallOfShameData, GetSudoSosWallOfShameResponse, GetSudoSosWallOfShameError, GetSudoSosPriceListData, GetSudoSosPriceListResponse, GetSudoSosPriceListError, SpotifyLoginData, SpotifyLoginResponse, SpotifyLoginCallbackData, SpotifyLoginCallbackResponse, SpotifyLoginCallbackError, GetCurrentSpotifyUserData, GetCurrentSpotifyUserResponse, GetAllSpotifyUsersData, GetAllSpotifyUsersResponse, DeleteSpotifyUserData, DeleteSpotifyUserResponse, SwitchToSpotifyUserData, SwitchToSpotifyUserResponse, SwitchToSpotifyUserError, GetSpotifyProfileData, GetSpotifyProfileResponse, GetSpotifyCurrentlyPlayingData, GetSpotifyCurrentlyPlayingResponse, GetSettingsData, GetSettingsResponse, SetSettingData, SetSettingResponse, SetSettingError, ClearSettingsFileData, ClearSettingsFileResponse, ClearSettingsFileError, SetSettingFileData, SetSettingFileResponse, GetFeatureFlagsData, GetFeatureFlagsResponse, GetScreensData, GetScreensResponse, CreateScreenData, CreateScreenResponse, EnableStrobeOnLightsGroupData, EnableStrobeOnLightsGroupResponse, DisableStrobeOnLightsGroupData, DisableStrobeOnLightsGroupResponse, FreezeLightsGroupData, FreezeLightsGroupResponse, UnfreezeLightsGroupData, UnfreezeLightsGroupResponse, ClearLightsGroupMasterDimmerData, ClearLightsGroupMasterDimmerError, SetLightsGroupMasterDimmerData, SetLightsGroupMasterDimmerError, SetGroupParOverrideData, SetGroupParOverrideResponse, ResetGroupParData, ResetGroupParResponse, FreezeGroupParData, FreezeGroupParResponse, UnfreezeGroupParData, UnfreezeGroupParResponse, SetGroupMovingHeadRgbOverrideData, SetGroupMovingHeadRgbOverrideResponse, ResetGroupMovingHeadRgbData, ResetGroupMovingHeadRgbResponse, FreezeGroupMovingHeadRgbData, FreezeGroupMovingHeadRgbResponse, UnfreezeMovingHeadRgbData, UnfreezeMovingHeadRgbResponse, SetGroupMovingHeadWheelOverrideData, SetGroupMovingHeadWheelOverrideResponse, ResetGroupMovingHeadWheelData, ResetGroupMovingHeadWheelResponse, FreezeGroupMovingHeadWheelData, FreezeGroupMovingHeadWheelResponse, UnfreezeMovingHeadWheelData, UnfreezeMovingHeadWheelResponse, TurnOnLightsSwitchData, TurnOnLightsSwitchResponse, TurnOffLightsSwitchData, TurnOffLightsSwitchResponse, GetLightsControllersData, GetLightsControllersResponse, CreateLightsControllerData, CreateLightsControllerResponse, GetSingleLightsControllerData, GetSingleLightsControllerResponse, GetAllLightsSwitchesData, GetAllLightsSwitchesResponse, GetLightsGroupsData, GetLightsGroupsResponse, GetSingleLightsGroupData, GetSingleLightsGroupResponse, GetControllerLightsGroupsData, GetControllerLightsGroupsResponse, CreateLightsGroupData, CreateLightsGroupResponse, GetControllerLightsSwitchesData, GetControllerLightsSwitchesResponse, CreateLightsSwitchData, CreateLightsSwitchResponse, GetAllLightsParsData, GetAllLightsParsResponse, CreateLightsParData, CreateLightsParResponse, GetAllLightsMovingHeadsRgbData, GetAllLightsMovingHeadsRgbResponse, CreateLightsMovingHeadRgbData, CreateLightsMovingHeadRgbResponse, GetAllLightsMovingHeadsWheelData, GetAllLightsMovingHeadsWheelResponse, CreateLightsMovingHeadWheelData, CreateLightsMovingHeadWheelResponse, GetAllLightsEffectsData, GetAllLightsEffectsResponse, GetAllLightsColorsData, GetAllLightsColorsResponse, GetAudiosData, GetAudiosResponse, CreateAudioData, CreateAudioResponse, SetAudioPlayingData, SetAudioPlayingResponse, SetAudioPlayingError, GetAudioHandlersData, GetAudioHandlersResponse, SetAudioHandlerData, SetAudioHandlerResponse, GetLightsHandlersData, GetLightsHandlersResponse, SetLightsHandlerData, SetLightsHandlerResponse, GetScreenHandlersData, GetScreenHandlersResponse, SetScreenHandlerData, SetScreenHandlerResponse, ResetAllHandlersToDefaultsData, ResetAllHandlersToDefaultsResponse, GetIntegrationEndpointsData, GetIntegrationEndpointsResponse, GetAllIntegrationUsersData, GetAllIntegrationUsersResponse, CreateIntegrationUserData, CreateIntegrationUserResponse, DeleteIntegrationUserData, DeleteIntegrationUserResponse, GetSingleIntegrationUserData, GetSingleIntegrationUserResponse, UpdateIntegrationUserData, UpdateIntegrationUserResponse, GetIntegrationUserKeyData, GetIntegrationUserKeyResponse, GetAllOrdersData, GetAllOrdersResponse, GetAllOrdersError, AddOrderData, AddOrderResponse, AddOrderError, AddOrderWebhookData, AddOrderWebhookError, RemoveOrderData, RemoveOrderResponse, RemoveOrderError, DisableAllModesData, DisableCenturionData, DisableCenturionError, GetCenturionData, GetCenturionResponse, GetCenturionError, EnableCenturionData, EnableCenturionResponse, EnableCenturionError, DisableTimeTrailRacingData, DisableTimeTrailRacingError, GetRaceStateData, GetRaceStateResponse, GetRaceStateError, EnableTimeTrailRaceData, EnableTimeTrailRaceResponse, EnableTimeTrailRaceError, RaceRegisterPlayerData, RaceRegisterPlayerResponse, RaceRegisterPlayerError, RaceReadyData, RaceReadyResponse, RaceReadyError, RaceStartData, RaceStartResponse, RaceStartError, RaceFinishData, RaceFinishResponse, RaceFinishError, RaceRevealScoreData, RaceRevealScoreResponse, RaceRevealScoreError, RaceResetPlayerData, RaceResetPlayerResponse, RaceResetPlayerError, GetCenturionStateData, GetCenturionStateResponse, GetCenturionStateError, StartCenturionData, StartCenturionResponse, StartCenturionError, SkipCenturionData, SkipCenturionResponse, SkipCenturionError, StopCenturionData, StopCenturionResponse, StopCenturionError, GetCenturionTapesData, GetCenturionTapesResponse, GetCenturionTapesError, GetRoomResponsibleLegacyUrlData, GetRoomResponsibleLegacyUrlResponse, GetPostersData, GetPostersResponse, ForceUpdatePostersData, ForceUpdatePostersResponse, GetPosterBorrelModeData, GetPosterBorrelModeResponse, SetPosterBorrelModeData, SetPosterBorrelModeResponse, GetTrainsData, GetTrainsResponse, GetPhotoData, GetPhotoResponse, GetOlympicsMedalTableData, GetOlympicsMedalTableResponse, GetDutchOlympicMedalsData, GetDutchOlympicMedalsResponse, GetPosterSettingsData, GetPosterSettingsResponse, GetSettingsProgressBarLogoData, GetSettingsProgressBarLogoResponse, GetSettingsProgressBarStylesheetData, GetSettingsProgressBarStylesheetResponse, HideStaticPosterData, HideStaticPosterResponse, GetStaticPosterHandlerStateData, GetStaticPosterHandlerStateResponse, SetStaticPosterClockData, SetStaticPosterClockResponse, GetAllStaticPostersData, GetAllStaticPostersResponse, CreateStaticPosterFileData, CreateStaticPosterFileResponse, CreateStaticPosterFileError, CreateStaticPosterUrlData, CreateStaticPosterUrlResponse, DeleteStaticPosterData, DeleteStaticPosterResponse, ShowStaticPosterData, ShowStaticPosterResponse, ApplyLightsEffectColorData, ApplyLightsEffectColorResponse, UpdateLightsEffectColorColorsData, UpdateLightsEffectColorColorsError, ApplyLightsEffectMovementData, ApplyLightsEffectMovementResponse, GetAllPredefinedLightsEffectsData, GetAllPredefinedLightsEffectsResponse, CreatePredefinedLightsEffectData, CreatePredefinedLightsEffectResponse, DeletePredefinedLightsEffectData, DeletePredefinedLightsEffectResponse, UpdatePredefinedLightsEffectData, UpdatePredefinedLightsEffectResponse, GetAllScenesData, GetAllScenesResponse, CreateSceneData, CreateSceneError, DeleteSceneData, DeleteSceneResponse, GetSingleSceneData, GetSingleSceneResponse, ApplySceneData, ApplySceneResponse, ClearSceneData, ClearSceneResponse, GetPersonalDataData, GetPersonalDataResponse, StopArtificialBeatGeneratorData, StopArtificialBeatGeneratorResponse, GetArtificialBeatGeneratorData, GetArtificialBeatGeneratorResponse, StartArtificialBeatGeneratorData, StartArtificialBeatGeneratorResponse, GetInformationData, GetInformationResponse, GetInformationError, GetSecurityGroupsData, GetSecurityGroupsResponse, GetAuditLogsData, GetAuditLogsResponse, AuthMockData, AuthMockResponse, GetOidcParametersData, GetOidcParametersResponse, AuthOidcData, AuthOidcResponse, AuthKeyData, AuthKeyResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getAllTimedEvents = <ThrowOnError extends boolean = false>(options?: Options<GetAllTimedEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllTimedEventsResponse, unknown, ThrowOnError>({
        url: '/timed-events',
        ...options
    });
};

export const createTimedEvent = <ThrowOnError extends boolean = false>(options: Options<CreateTimedEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTimedEventResponse, unknown, ThrowOnError>({
        url: '/timed-events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteTimedEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteTimedEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTimedEventResponse, unknown, ThrowOnError>({
        url: '/timed-events/{id}',
        ...options
    });
};

export const getSingleTimedEvent = <ThrowOnError extends boolean = false>(options: Options<GetSingleTimedEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleTimedEventResponse, unknown, ThrowOnError>({
        url: '/timed-events/{id}',
        ...options
    });
};

export const updateTimedEvent = <ThrowOnError extends boolean = false>(options: Options<UpdateTimedEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTimedEventResponse, unknown, ThrowOnError>({
        url: '/timed-events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getSudoSosWallOfShame = <ThrowOnError extends boolean = false>(options?: Options<GetSudoSosWallOfShameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSudoSosWallOfShameResponse, GetSudoSosWallOfShameError, ThrowOnError>({
        url: '/handler/screen/poster/sudosos/wall-of-shame',
        ...options
    });
};

export const getSudoSosPriceList = <ThrowOnError extends boolean = false>(options?: Options<GetSudoSosPriceListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSudoSosPriceListResponse, GetSudoSosPriceListError, ThrowOnError>({
        url: '/handler/screen/poster/sudosos/price-list',
        ...options
    });
};

/**
 * Login a user via Spotify. Used to bind the returned spotify user to this server instance.
 * Performs a redirect to the Spotify website
 */
export const spotifyLogin = <ThrowOnError extends boolean = false>(options?: Options<SpotifyLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SpotifyLoginResponse, unknown, ThrowOnError>({
        url: '/spotify/login',
        ...options
    });
};

export const spotifyLoginCallback = <ThrowOnError extends boolean = false>(options: Options<SpotifyLoginCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SpotifyLoginCallbackResponse, SpotifyLoginCallbackError, ThrowOnError>({
        url: '/spotify/callback',
        ...options
    });
};

/**
 * Get the currently active Spotify user.
 */
export const getCurrentSpotifyUser = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentSpotifyUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentSpotifyUserResponse, unknown, ThrowOnError>({
        url: '/spotify/user/current',
        ...options
    });
};

/**
 * Get all existing Spotify users
 */
export const getAllSpotifyUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllSpotifyUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSpotifyUsersResponse, unknown, ThrowOnError>({
        url: '/spotify/users',
        ...options
    });
};

/**
 * Delete an existing Spotify user
 */
export const deleteSpotifyUser = <ThrowOnError extends boolean = false>(options: Options<DeleteSpotifyUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSpotifyUserResponse, unknown, ThrowOnError>({
        url: '/spotify/users/{id}',
        ...options
    });
};

/**
 * Switch the currently active Spotify user to the user with the given ID
 */
export const switchToSpotifyUser = <ThrowOnError extends boolean = false>(options: Options<SwitchToSpotifyUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SwitchToSpotifyUserResponse, SwitchToSpotifyUserError, ThrowOnError>({
        url: '/spotify/users/{id}/switch',
        ...options
    });
};

/**
 * Get the Spotify profile from the currently active user
 */
export const getSpotifyProfile = <ThrowOnError extends boolean = false>(options?: Options<GetSpotifyProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSpotifyProfileResponse, unknown, ThrowOnError>({
        url: '/spotify/profile',
        ...options
    });
};

/**
 * Get the currently playing track (on Spotify or locally playing). Null if nothing is playing.
 */
export const getSpotifyCurrentlyPlaying = <ThrowOnError extends boolean = false>(options?: Options<GetSpotifyCurrentlyPlayingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSpotifyCurrentlyPlayingResponse, unknown, ThrowOnError>({
        url: '/spotify/currently-playing',
        ...options
    });
};

/**
 * Get all server settings. NOTE: this can include secrets
 * like private keys!
 */
export const getSettings = <ThrowOnError extends boolean = false>(options?: Options<GetSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSettingsResponse, unknown, ThrowOnError>({
        url: '/settings',
        ...options
    });
};

/**
 * Change the value of a server setting
 */
export const setSetting = <ThrowOnError extends boolean = false>(options: Options<SetSettingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetSettingResponse, SetSettingError, ThrowOnError>({
        url: '/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Clear a file from the server settings
 */
export const clearSettingsFile = <ThrowOnError extends boolean = false>(options: Options<ClearSettingsFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ClearSettingsFileResponse, ClearSettingsFileError, ThrowOnError>({
        url: '/settings/file',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload a file for a server setting
 */
export const setSettingFile = <ThrowOnError extends boolean = false>(options: Options<SetSettingFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetSettingFileResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/settings/file',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get a list of all feature flags and whether they are enabled/disabled.
 */
export const getFeatureFlags = <ThrowOnError extends boolean = false>(options?: Options<GetFeatureFlagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFeatureFlagsResponse, unknown, ThrowOnError>({
        url: '/settings/feature-flags',
        ...options
    });
};

export const getScreens = <ThrowOnError extends boolean = false>(options?: Options<GetScreensData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScreensResponse, unknown, ThrowOnError>({
        url: '/screen',
        ...options
    });
};

export const createScreen = <ThrowOnError extends boolean = false>(options: Options<CreateScreenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateScreenResponse, unknown, ThrowOnError>({
        url: '/screen',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Enable the strobe for all fixtures in the given group
 */
export const enableStrobeOnLightsGroup = <ThrowOnError extends boolean = false>(options: Options<EnableStrobeOnLightsGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EnableStrobeOnLightsGroupResponse, unknown, ThrowOnError>({
        url: '/lights/group/{id}/strobe/enable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Disable the strobe for all fixtures in the given group
 */
export const disableStrobeOnLightsGroup = <ThrowOnError extends boolean = false>(options: Options<DisableStrobeOnLightsGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DisableStrobeOnLightsGroupResponse, unknown, ThrowOnError>({
        url: '/lights/group/{id}/strobe/disable',
        ...options
    });
};

/**
 * Store the next state of all fixtures in the given LightsGroup and do not change them anymore
 * (i.e. freeze the fixture in its current state)
 */
export const freezeLightsGroup = <ThrowOnError extends boolean = false>(options: Options<FreezeLightsGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FreezeLightsGroupResponse, unknown, ThrowOnError>({
        url: '/lights/group/{id}/freeze',
        ...options
    });
};

/**
 * Unfreeze the DMX values
 */
export const unfreezeLightsGroup = <ThrowOnError extends boolean = false>(options: Options<UnfreezeLightsGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnfreezeLightsGroupResponse, unknown, ThrowOnError>({
        url: '/lights/group/{id}/unfreeze',
        ...options
    });
};

export const clearLightsGroupMasterDimmer = <ThrowOnError extends boolean = false>(options: Options<ClearLightsGroupMasterDimmerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, ClearLightsGroupMasterDimmerError, ThrowOnError>({
        url: '/lights/group/{id}/dimmer',
        ...options
    });
};

export const setLightsGroupMasterDimmer = <ThrowOnError extends boolean = false>(options: Options<SetLightsGroupMasterDimmerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, SetLightsGroupMasterDimmerError, ThrowOnError>({
        url: '/lights/group/{id}/dimmer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const setGroupParOverride = <ThrowOnError extends boolean = false>(options: Options<SetGroupParOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetGroupParOverrideResponse, unknown, ThrowOnError>({
        url: '/lights/group/par/{id}/override',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Perform the fixture's internal reset operation if possible. Do nothing otherwise
 */
export const resetGroupPar = <ThrowOnError extends boolean = false>(options: Options<ResetGroupParData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetGroupParResponse, unknown, ThrowOnError>({
        url: '/lights/group/par/{id}/reset',
        ...options
    });
};

/**
 * Store the next state of the fixture and do not change anymore
 * (i.e. freeze the fixture in its current state)
 */
export const freezeGroupPar = <ThrowOnError extends boolean = false>(options: Options<FreezeGroupParData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FreezeGroupParResponse, unknown, ThrowOnError>({
        url: '/lights/group/par/{id}/freeze',
        ...options
    });
};

/**
 * Unfreeze the DMX values
 */
export const unfreezeGroupPar = <ThrowOnError extends boolean = false>(options: Options<UnfreezeGroupParData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnfreezeGroupParResponse, unknown, ThrowOnError>({
        url: '/lights/group/par/{id}/unfreeze',
        ...options
    });
};

export const setGroupMovingHeadRgbOverride = <ThrowOnError extends boolean = false>(options: Options<SetGroupMovingHeadRgbOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetGroupMovingHeadRgbOverrideResponse, unknown, ThrowOnError>({
        url: '/lights/group/moving-head-rgb/{id}/override',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Perform the fixture's internal reset operation if possible. Do nothing otherwise
 */
export const resetGroupMovingHeadRgb = <ThrowOnError extends boolean = false>(options: Options<ResetGroupMovingHeadRgbData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetGroupMovingHeadRgbResponse, unknown, ThrowOnError>({
        url: '/lights/group/moving-head-rgb/{id}/reset',
        ...options
    });
};

/**
 * Store the next state of the fixture and do not change anymore
 * (i.e. freeze the fixture in its current state)
 */
export const freezeGroupMovingHeadRgb = <ThrowOnError extends boolean = false>(options: Options<FreezeGroupMovingHeadRgbData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FreezeGroupMovingHeadRgbResponse, unknown, ThrowOnError>({
        url: '/lights/group/moving-head-rgb/{id}/freeze',
        ...options
    });
};

/**
 * Unfreeze the DMX values
 */
export const unfreezeMovingHeadRgb = <ThrowOnError extends boolean = false>(options: Options<UnfreezeMovingHeadRgbData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnfreezeMovingHeadRgbResponse, unknown, ThrowOnError>({
        url: '/lights/group/moving-head-rgb/{id}/unfreeze',
        ...options
    });
};

export const setGroupMovingHeadWheelOverride = <ThrowOnError extends boolean = false>(options: Options<SetGroupMovingHeadWheelOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetGroupMovingHeadWheelOverrideResponse, unknown, ThrowOnError>({
        url: '/lights/group/moving-head-wheel/{id}/override',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Perform the fixture's internal reset operation if possible. Do nothing otherwise
 */
export const resetGroupMovingHeadWheel = <ThrowOnError extends boolean = false>(options: Options<ResetGroupMovingHeadWheelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetGroupMovingHeadWheelResponse, unknown, ThrowOnError>({
        url: '/lights/group/moving-head-wheel/{id}/reset',
        ...options
    });
};

/**
 * Store the next state of the fixture and do not change anymore
 * (i.e. freeze the fixture in its current state)
 */
export const freezeGroupMovingHeadWheel = <ThrowOnError extends boolean = false>(options: Options<FreezeGroupMovingHeadWheelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FreezeGroupMovingHeadWheelResponse, unknown, ThrowOnError>({
        url: '/lights/group/moving-head-wheel/{id}/freeze',
        ...options
    });
};

/**
 * Unfreeze the DMX values
 */
export const unfreezeMovingHeadWheel = <ThrowOnError extends boolean = false>(options: Options<UnfreezeMovingHeadWheelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnfreezeMovingHeadWheelResponse, unknown, ThrowOnError>({
        url: '/lights/group/moving-head-wheel/{id}/unfreeze',
        ...options
    });
};

export const turnOnLightsSwitch = <ThrowOnError extends boolean = false>(options: Options<TurnOnLightsSwitchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TurnOnLightsSwitchResponse, unknown, ThrowOnError>({
        url: '/lights/switch/{id}/on',
        ...options
    });
};

export const turnOffLightsSwitch = <ThrowOnError extends boolean = false>(options: Options<TurnOffLightsSwitchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TurnOffLightsSwitchResponse, unknown, ThrowOnError>({
        url: '/lights/switch/{id}/off',
        ...options
    });
};

export const getLightsControllers = <ThrowOnError extends boolean = false>(options?: Options<GetLightsControllersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLightsControllersResponse, unknown, ThrowOnError>({
        url: '/lights/controller',
        ...options
    });
};

export const createLightsController = <ThrowOnError extends boolean = false>(options: Options<CreateLightsControllerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLightsControllerResponse, unknown, ThrowOnError>({
        url: '/lights/controller',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getSingleLightsController = <ThrowOnError extends boolean = false>(options: Options<GetSingleLightsControllerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleLightsControllerResponse, unknown, ThrowOnError>({
        url: '/lights/controller/{id}',
        ...options
    });
};

export const getAllLightsSwitches = <ThrowOnError extends boolean = false>(options?: Options<GetAllLightsSwitchesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllLightsSwitchesResponse, unknown, ThrowOnError>({
        url: '/lights/switch',
        ...options
    });
};

export const getLightsGroups = <ThrowOnError extends boolean = false>(options?: Options<GetLightsGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLightsGroupsResponse, unknown, ThrowOnError>({
        url: '/lights/group',
        ...options
    });
};

export const getSingleLightsGroup = <ThrowOnError extends boolean = false>(options: Options<GetSingleLightsGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleLightsGroupResponse, unknown, ThrowOnError>({
        url: '/lights/group/{id}',
        ...options
    });
};

export const getControllerLightsGroups = <ThrowOnError extends boolean = false>(options: Options<GetControllerLightsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetControllerLightsGroupsResponse, unknown, ThrowOnError>({
        url: '/lights/controller/{id}/groups',
        ...options
    });
};

export const createLightsGroup = <ThrowOnError extends boolean = false>(options: Options<CreateLightsGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLightsGroupResponse, unknown, ThrowOnError>({
        url: '/lights/controller/{id}/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getControllerLightsSwitches = <ThrowOnError extends boolean = false>(options: Options<GetControllerLightsSwitchesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetControllerLightsSwitchesResponse, unknown, ThrowOnError>({
        url: '/lights/controller/{id}/switches',
        ...options
    });
};

export const createLightsSwitch = <ThrowOnError extends boolean = false>(options: Options<CreateLightsSwitchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLightsSwitchResponse, unknown, ThrowOnError>({
        url: '/lights/controller/{id}/switches',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllLightsPars = <ThrowOnError extends boolean = false>(options?: Options<GetAllLightsParsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllLightsParsResponse, unknown, ThrowOnError>({
        url: '/lights/fixture/par',
        ...options
    });
};

export const createLightsPar = <ThrowOnError extends boolean = false>(options: Options<CreateLightsParData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLightsParResponse, unknown, ThrowOnError>({
        url: '/lights/fixture/par',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllLightsMovingHeadsRgb = <ThrowOnError extends boolean = false>(options?: Options<GetAllLightsMovingHeadsRgbData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllLightsMovingHeadsRgbResponse, unknown, ThrowOnError>({
        url: '/lights/fixture/moving-head/rgb',
        ...options
    });
};

export const createLightsMovingHeadRgb = <ThrowOnError extends boolean = false>(options: Options<CreateLightsMovingHeadRgbData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLightsMovingHeadRgbResponse, unknown, ThrowOnError>({
        url: '/lights/fixture/moving-head/rgb',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllLightsMovingHeadsWheel = <ThrowOnError extends boolean = false>(options?: Options<GetAllLightsMovingHeadsWheelData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllLightsMovingHeadsWheelResponse, unknown, ThrowOnError>({
        url: '/lights/fixture/moving-head/wheel',
        ...options
    });
};

export const createLightsMovingHeadWheel = <ThrowOnError extends boolean = false>(options: Options<CreateLightsMovingHeadWheelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLightsMovingHeadWheelResponse, unknown, ThrowOnError>({
        url: '/lights/fixture/moving-head/wheel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllLightsEffects = <ThrowOnError extends boolean = false>(options?: Options<GetAllLightsEffectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllLightsEffectsResponse, unknown, ThrowOnError>({
        url: '/lights/effects',
        ...options
    });
};

export const getAllLightsColors = <ThrowOnError extends boolean = false>(options?: Options<GetAllLightsColorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllLightsColorsResponse, unknown, ThrowOnError>({
        url: '/lights/colors',
        ...options
    });
};

export const getAudios = <ThrowOnError extends boolean = false>(options?: Options<GetAudiosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAudiosResponse, unknown, ThrowOnError>({
        url: '/audio',
        ...options
    });
};

export const createAudio = <ThrowOnError extends boolean = false>(options: Options<CreateAudioData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAudioResponse, unknown, ThrowOnError>({
        url: '/audio',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const setAudioPlaying = <ThrowOnError extends boolean = false>(options: Options<SetAudioPlayingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetAudioPlayingResponse, SetAudioPlayingError, ThrowOnError>({
        url: '/audio/{id}/playing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAudioHandlers = <ThrowOnError extends boolean = false>(options?: Options<GetAudioHandlersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAudioHandlersResponse, unknown, ThrowOnError>({
        url: '/handler/audio',
        ...options
    });
};

export const setAudioHandler = <ThrowOnError extends boolean = false>(options: Options<SetAudioHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetAudioHandlerResponse, unknown, ThrowOnError>({
        url: '/handler/audio/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getLightsHandlers = <ThrowOnError extends boolean = false>(options?: Options<GetLightsHandlersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLightsHandlersResponse, unknown, ThrowOnError>({
        url: '/handler/lights',
        ...options
    });
};

export const setLightsHandler = <ThrowOnError extends boolean = false>(options: Options<SetLightsHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetLightsHandlerResponse, unknown, ThrowOnError>({
        url: '/handler/lights/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getScreenHandlers = <ThrowOnError extends boolean = false>(options?: Options<GetScreenHandlersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScreenHandlersResponse, unknown, ThrowOnError>({
        url: '/handler/screen',
        ...options
    });
};

export const setScreenHandler = <ThrowOnError extends boolean = false>(options: Options<SetScreenHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetScreenHandlerResponse, unknown, ThrowOnError>({
        url: '/handler/screen/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const resetAllHandlersToDefaults = <ThrowOnError extends boolean = false>(options?: Options<ResetAllHandlersToDefaultsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ResetAllHandlersToDefaultsResponse, unknown, ThrowOnError>({
        url: '/handler/all/reset-to-defaults',
        ...options
    });
};

/**
 * Get a list of all endpoints that an integration user could access.
 */
export const getIntegrationEndpoints = <ThrowOnError extends boolean = false>(options?: Options<GetIntegrationEndpointsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetIntegrationEndpointsResponse, unknown, ThrowOnError>({
        url: '/user/integration/endpoints',
        ...options
    });
};

export const getAllIntegrationUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllIntegrationUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllIntegrationUsersResponse, unknown, ThrowOnError>({
        url: '/user/integration',
        ...options
    });
};

export const createIntegrationUser = <ThrowOnError extends boolean = false>(options: Options<CreateIntegrationUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIntegrationUserResponse, unknown, ThrowOnError>({
        url: '/user/integration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteIntegrationUser = <ThrowOnError extends boolean = false>(options: Options<DeleteIntegrationUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteIntegrationUserResponse, unknown, ThrowOnError>({
        url: '/user/integration/{id}',
        ...options
    });
};

export const getSingleIntegrationUser = <ThrowOnError extends boolean = false>(options: Options<GetSingleIntegrationUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleIntegrationUserResponse, unknown, ThrowOnError>({
        url: '/user/integration/{id}',
        ...options
    });
};

export const updateIntegrationUser = <ThrowOnError extends boolean = false>(options: Options<UpdateIntegrationUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateIntegrationUserResponse, unknown, ThrowOnError>({
        url: '/user/integration/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getIntegrationUserKey = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationUserKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntegrationUserKeyResponse, unknown, ThrowOnError>({
        url: '/user/integration/{id}/key',
        ...options
    });
};

export const getAllOrders = <ThrowOnError extends boolean = false>(options?: Options<GetAllOrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllOrdersResponse, GetAllOrdersError, ThrowOnError>({
        url: '/orders',
        ...options
    });
};

/**
 * Add a new order to be propagated to all connected screens.
 */
export const addOrder = <ThrowOnError extends boolean = false>(options: Options<AddOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddOrderResponse, AddOrderError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/orders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const addOrderWebhook = <ThrowOnError extends boolean = false>(options: Options<AddOrderWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AddOrderWebhookError, ThrowOnError>({
        url: '/orders/webhook',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const removeOrder = <ThrowOnError extends boolean = false>(options: Options<RemoveOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveOrderResponse, RemoveOrderError, ThrowOnError>({
        url: '/orders/{orderNumber}',
        ...options
    });
};

/**
 * Disable all modes, if one is active
 */
export const disableAllModes = <ThrowOnError extends boolean = false>(options?: Options<DisableAllModesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/modes',
        ...options
    });
};

export const disableCenturion = <ThrowOnError extends boolean = false>(options?: Options<DisableCenturionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DisableCenturionError, ThrowOnError>({
        url: '/modes/centurion',
        ...options
    });
};

export const getCenturion = <ThrowOnError extends boolean = false>(options?: Options<GetCenturionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCenturionResponse, GetCenturionError, ThrowOnError>({
        url: '/modes/centurion',
        ...options
    });
};

/**
 * Enable Centurion mode for the given devices
 */
export const enableCenturion = <ThrowOnError extends boolean = false>(options: Options<EnableCenturionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EnableCenturionResponse, EnableCenturionError, ThrowOnError>({
        url: '/modes/centurion',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const disableTimeTrailRacing = <ThrowOnError extends boolean = false>(options?: Options<DisableTimeTrailRacingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, DisableTimeTrailRacingError, ThrowOnError>({
        url: '/modes/time-trail-race',
        ...options
    });
};

export const getRaceState = <ThrowOnError extends boolean = false>(options?: Options<GetRaceStateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRaceStateResponse, GetRaceStateError, ThrowOnError>({
        url: '/modes/time-trail-race',
        ...options
    });
};

/**
 * Enable Time Trail Race (spoelbakkenrace) mode for the given devices
 */
export const enableTimeTrailRace = <ThrowOnError extends boolean = false>(options: Options<EnableTimeTrailRaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EnableTimeTrailRaceResponse, EnableTimeTrailRaceError, ThrowOnError>({
        url: '/modes/time-trail-race',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const raceRegisterPlayer = <ThrowOnError extends boolean = false>(options: Options<RaceRegisterPlayerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RaceRegisterPlayerResponse, RaceRegisterPlayerError, ThrowOnError>({
        url: '/modes/time-trail-race/register-player',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const raceReady = <ThrowOnError extends boolean = false>(options?: Options<RaceReadyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RaceReadyResponse, RaceReadyError, ThrowOnError>({
        url: '/modes/time-trail-race/ready',
        ...options
    });
};

export const raceStart = <ThrowOnError extends boolean = false>(options?: Options<RaceStartData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RaceStartResponse, RaceStartError, ThrowOnError>({
        url: '/modes/time-trail-race/start',
        ...options
    });
};

export const raceFinish = <ThrowOnError extends boolean = false>(options?: Options<RaceFinishData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RaceFinishResponse, RaceFinishError, ThrowOnError>({
        url: '/modes/time-trail-race/finish',
        ...options
    });
};

export const raceRevealScore = <ThrowOnError extends boolean = false>(options?: Options<RaceRevealScoreData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RaceRevealScoreResponse, RaceRevealScoreError, ThrowOnError>({
        url: '/modes/time-trail-race/reveal-score',
        ...options
    });
};

export const raceResetPlayer = <ThrowOnError extends boolean = false>(options?: Options<RaceResetPlayerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RaceResetPlayerResponse, RaceResetPlayerError, ThrowOnError>({
        url: '/modes/time-trail-race/reset-player',
        ...options
    });
};

export const getCenturionState = <ThrowOnError extends boolean = false>(options?: Options<GetCenturionStateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCenturionStateResponse, GetCenturionStateError, ThrowOnError>({
        url: '/modes/centurion/state',
        ...options
    });
};

/**
 * Start a centurion
 */
export const startCenturion = <ThrowOnError extends boolean = false>(options?: Options<StartCenturionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StartCenturionResponse, StartCenturionError, ThrowOnError>({
        url: '/modes/centurion/start',
        ...options
    });
};

export const skipCenturion = <ThrowOnError extends boolean = false>(options: Options<SkipCenturionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SkipCenturionResponse, SkipCenturionError, ThrowOnError>({
        url: '/modes/centurion/skip',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stop a centurion
 */
export const stopCenturion = <ThrowOnError extends boolean = false>(options?: Options<StopCenturionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StopCenturionResponse, StopCenturionError, ThrowOnError>({
        url: '/modes/centurion/stop',
        ...options
    });
};

export const getCenturionTapes = <ThrowOnError extends boolean = false>(options?: Options<GetCenturionTapesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCenturionTapesResponse, GetCenturionTapesError, ThrowOnError>({
        url: '/modes/centurion/tapes',
        ...options
    });
};

export const getRoomResponsibleLegacyUrl = <ThrowOnError extends boolean = false>(options?: Options<GetRoomResponsibleLegacyUrlData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRoomResponsibleLegacyUrlResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/room-responsible-legacy-url',
        ...options
    });
};

export const getPosters = <ThrowOnError extends boolean = false>(options?: Options<GetPostersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPostersResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/carousel',
        ...options
    });
};

export const forceUpdatePosters = <ThrowOnError extends boolean = false>(options?: Options<ForceUpdatePostersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ForceUpdatePostersResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/carousel/force-update',
        ...options
    });
};

export const getPosterBorrelMode = <ThrowOnError extends boolean = false>(options?: Options<GetPosterBorrelModeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPosterBorrelModeResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/carousel/borrel-mode',
        ...options
    });
};

export const setPosterBorrelMode = <ThrowOnError extends boolean = false>(options: Options<SetPosterBorrelModeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetPosterBorrelModeResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/carousel/borrel-mode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTrains = <ThrowOnError extends boolean = false>(options?: Options<GetTrainsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTrainsResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/carousel/train-departures',
        ...options
    });
};

export const getPhoto = <ThrowOnError extends boolean = false>(options: Options<GetPhotoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetPhotoResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/carousel/photo',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getOlympicsMedalTable = <ThrowOnError extends boolean = false>(options?: Options<GetOlympicsMedalTableData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOlympicsMedalTableResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/carousel/olympics/medal-table',
        ...options
    });
};

export const getDutchOlympicMedals = <ThrowOnError extends boolean = false>(options?: Options<GetDutchOlympicMedalsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDutchOlympicMedalsResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/carousel/olympics/country-medals',
        ...options
    });
};

export const getPosterSettings = <ThrowOnError extends boolean = false>(options?: Options<GetPosterSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPosterSettingsResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/settings',
        ...options
    });
};

export const getSettingsProgressBarLogo = <ThrowOnError extends boolean = false>(options?: Options<GetSettingsProgressBarLogoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSettingsProgressBarLogoResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/settings/progress-bar-logo',
        ...options
    });
};

export const getSettingsProgressBarStylesheet = <ThrowOnError extends boolean = false>(options?: Options<GetSettingsProgressBarStylesheetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSettingsProgressBarStylesheetResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/settings/custom-stylesheet',
        ...options
    });
};

/**
 * Hide the static poster currently shown on screens. The subscribers should
 * revert to their default view.
 */
export const hideStaticPoster = <ThrowOnError extends boolean = false>(options?: Options<HideStaticPosterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<HideStaticPosterResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/static',
        ...options
    });
};

/**
 * Return the current state (or settings) of the static poster handler
 */
export const getStaticPosterHandlerState = <ThrowOnError extends boolean = false>(options?: Options<GetStaticPosterHandlerStateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStaticPosterHandlerStateResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/static',
        ...options
    });
};

/**
 * Chang the visibility of the clock on-screen
 */
export const setStaticPosterClock = <ThrowOnError extends boolean = false>(options: Options<SetStaticPosterClockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetStaticPosterClockResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/static/clock',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all static posters from the database.
 */
export const getAllStaticPosters = <ThrowOnError extends boolean = false>(options?: Options<GetAllStaticPostersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllStaticPostersResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/static/items',
        ...options
    });
};

/**
 * Create a new static poster based on a file (image or video).
 */
export const createStaticPosterFile = <ThrowOnError extends boolean = false>(options: Options<CreateStaticPosterFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateStaticPosterFileResponse, CreateStaticPosterFileError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/handler/screen/poster/static/items/file',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Create a new static poster based on a URL
 */
export const createStaticPosterUrl = <ThrowOnError extends boolean = false>(options: Options<CreateStaticPosterUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateStaticPosterUrlResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/static/items/url',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Permanently delete a static poster.
 */
export const deleteStaticPoster = <ThrowOnError extends boolean = false>(options: Options<DeleteStaticPosterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteStaticPosterResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/static/items/{id}',
        ...options
    });
};

/**
 * Show the given static poster on all screens using the StaticPosterHandler.
 */
export const showStaticPoster = <ThrowOnError extends boolean = false>(options: Options<ShowStaticPosterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShowStaticPosterResponse, unknown, ThrowOnError>({
        url: '/handler/screen/poster/static/items/{id}/show',
        ...options
    });
};

/**
 * Given a list of color effects to create, add the given effects to the lightsgroup with the
 * given ID. Remove all color effects if an empty array is given
 */
export const applyLightsEffectColor = <ThrowOnError extends boolean = false>(options: Options<ApplyLightsEffectColorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApplyLightsEffectColorResponse, unknown, ThrowOnError>({
        url: '/handler/lights/set-effects/{id}/color',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Change the colors of the given lights group's color effects
 */
export const updateLightsEffectColorColors = <ThrowOnError extends boolean = false>(options: Options<UpdateLightsEffectColorColorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, UpdateLightsEffectColorColorsError, ThrowOnError>({
        url: '/handler/lights/set-effects/{id}/color/colors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Given a list of movement effects to create, add the given effects to the lightsgroup with the
 * given ID. Remove all movement effects if an empty array is given
 */
export const applyLightsEffectMovement = <ThrowOnError extends boolean = false>(options: Options<ApplyLightsEffectMovementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApplyLightsEffectMovementResponse, unknown, ThrowOnError>({
        url: '/handler/lights/set-effects/{id}/movement',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all existing predefined effects
 */
export const getAllPredefinedLightsEffects = <ThrowOnError extends boolean = false>(options?: Options<GetAllPredefinedLightsEffectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPredefinedLightsEffectsResponse, unknown, ThrowOnError>({
        url: '/handler/lights/set-effects/predefined',
        ...options
    });
};

/**
 * Create a new predefined effect
 */
export const createPredefinedLightsEffect = <ThrowOnError extends boolean = false>(options: Options<CreatePredefinedLightsEffectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePredefinedLightsEffectResponse, unknown, ThrowOnError>({
        url: '/handler/lights/set-effects/predefined',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePredefinedLightsEffect = <ThrowOnError extends boolean = false>(options: Options<DeletePredefinedLightsEffectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePredefinedLightsEffectResponse, unknown, ThrowOnError>({
        url: '/handler/lights/set-effects/predefined/{id}',
        ...options
    });
};

export const updatePredefinedLightsEffect = <ThrowOnError extends boolean = false>(options: Options<UpdatePredefinedLightsEffectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdatePredefinedLightsEffectResponse, unknown, ThrowOnError>({
        url: '/handler/lights/set-effects/predefined/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a list of all scenes
 */
export const getAllScenes = <ThrowOnError extends boolean = false>(options?: Options<GetAllScenesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllScenesResponse, unknown, ThrowOnError>({
        url: '/handler/lights/scenes',
        ...options
    });
};

/**
 * Create a new scene
 */
export const createScene = <ThrowOnError extends boolean = false>(options: Options<CreateSceneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateSceneError, ThrowOnError>({
        url: '/handler/lights/scenes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteScene = <ThrowOnError extends boolean = false>(options: Options<DeleteSceneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSceneResponse, unknown, ThrowOnError>({
        url: '/handler/lights/scenes/{id}',
        ...options
    });
};

export const getSingleScene = <ThrowOnError extends boolean = false>(options: Options<GetSingleSceneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleSceneResponse, unknown, ThrowOnError>({
        url: '/handler/lights/scenes/{id}',
        ...options
    });
};

/**
 * Apply the current scene to all lights that are registered to the ScenesHandler
 */
export const applyScene = <ThrowOnError extends boolean = false>(options: Options<ApplySceneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApplySceneResponse, unknown, ThrowOnError>({
        url: '/handler/lights/scenes/{id}/apply',
        ...options
    });
};

/**
 * Clear the scene that is applied to the ScenesHandler
 */
export const clearScene = <ThrowOnError extends boolean = false>(options?: Options<ClearSceneData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<ClearSceneResponse, unknown, ThrowOnError>({
        url: '/handler/lights/scenes/clear',
        ...options
    });
};

export const getPersonalData = <ThrowOnError extends boolean = false>(options: Options<GetPersonalDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPersonalDataResponse, unknown, ThrowOnError>({
        url: '/gdpr/personal-data/{userId}',
        ...options
    });
};

export const stopArtificialBeatGenerator = <ThrowOnError extends boolean = false>(options?: Options<StopArtificialBeatGeneratorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<StopArtificialBeatGeneratorResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/beat-generator',
        ...options
    });
};

export const getArtificialBeatGenerator = <ThrowOnError extends boolean = false>(options?: Options<GetArtificialBeatGeneratorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetArtificialBeatGeneratorResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/beat-generator',
        ...options
    });
};

export const startArtificialBeatGenerator = <ThrowOnError extends boolean = false>(options: Options<StartArtificialBeatGeneratorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartArtificialBeatGeneratorResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/beat-generator',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getInformation = <ThrowOnError extends boolean = false>(options?: Options<GetInformationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetInformationResponse, GetInformationError, ThrowOnError>({
        url: '/user/me',
        ...options
    });
};

/**
 * Returns the security groups
 */
export const getSecurityGroups = <ThrowOnError extends boolean = false>(options?: Options<GetSecurityGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSecurityGroupsResponse, unknown, ThrowOnError>({
        url: '/auth/groups',
        ...options
    });
};

export const getAuditLogs = <ThrowOnError extends boolean = false>(options?: Options<GetAuditLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuditLogsResponse, unknown, ThrowOnError>({
        url: '/audit-logs',
        ...options
    });
};

export const authMock = <ThrowOnError extends boolean = false>(options?: Options<AuthMockData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthMockResponse, unknown, ThrowOnError>({
        url: '/auth/mock',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the oidc parameters
 */
export const getOidcParameters = <ThrowOnError extends boolean = false>(options?: Options<GetOidcParametersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOidcParametersResponse, unknown, ThrowOnError>({
        url: '/auth/oidc',
        ...options
    });
};

export const authOidc = <ThrowOnError extends boolean = false>(options: Options<AuthOidcData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthOidcResponse, unknown, ThrowOnError>({
        url: '/auth/oidc',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authKey = <ThrowOnError extends boolean = false>(options?: Options<AuthKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthKeyResponse, unknown, ThrowOnError>({
        url: '/auth/key',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};