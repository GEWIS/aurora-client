// This file is auto-generated by @hey-api/openapi-ts

export type TimedEventReset = {
    type: 'system-reset';
};

export type TimedEventCleanAuditLogs = {
    type: 'clean-audit-logs';
};

export type SwitchHandlerParams = {
    id: number;
    handler: string;
};

export type TimedEventSwitchHandlerAudio = {
    params: SwitchHandlerParams;
    type: 'switch-handler-audio';
};

export type TimedEventSwitchHandlerLights = {
    params: SwitchHandlerParams;
    type: 'switch-handler-lights';
};

export type TimedEventSwitchHandlerScreen = {
    params: SwitchHandlerParams;
    type: 'switch-handler-screen';
};

export type TimedEventSetStaticPoster = {
    params: {
        clockVisible: boolean;
        posterId: number;
    };
    type: 'timed-event-set-static-poster';
};

export type EventSpec = TimedEventReset | TimedEventCleanAuditLogs | TimedEventSwitchHandlerAudio | TimedEventSwitchHandlerLights | TimedEventSwitchHandlerScreen | TimedEventSetStaticPoster;

export type TimedEventResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    cronExpression: string;
    eventSpec: EventSpec;
    skipNext: boolean;
};

export type CreateTimedEventRequest = {
    cronExpression: string;
    eventSpec: EventSpec;
};

export type UpdateTimedEventRequest = {
    cronExpression: string;
    eventSpec: EventSpec;
    /**
     * Whether the next time this should fire, it should be skipped instead
     */
    skipNext: boolean;
};

export type DineroObjectResponse = {
    /**
     * amount
     */
    amount: number;
    /**
     * currency
     */
    currency: string;
    /**
     * precision
     */
    precision: number;
};

export type SudoSosDebtorResponse = {
    userId: number;
    firstName: string;
    nickName?: string;
    lastName?: string;
    balance: DineroObjectResponse;
    fine?: DineroObjectResponse;
    isBac: boolean;
    /**
     * If the user has a fine for more than 4 weeks
     */
    isLongstanding: boolean;
};

export type BaseVatGroupResponse = {
    /**
     * The unique id of the entity.
     */
    id: number;
    /**
     * The creation Date of the entity.
     */
    createdAt?: string;
    /**
     * The last update Date of the entity.
     */
    updatedAt?: string;
    /**
     * The version of the entity.
     */
    version?: number;
    /**
     * Percentage of VAT
     */
    percentage: number;
    /**
     * Whether VAT should be hidden
     */
    hidden: boolean;
};

export type BaseUserResponse = {
    /**
     * The unique id of the entity.
     */
    id: number;
    /**
     * The creation Date of the entity.
     */
    createdAt?: string;
    /**
     * The last update Date of the entity.
     */
    updatedAt?: string;
    /**
     * The version of the entity.
     */
    version?: number;
    /**
     * The name of the user.
     */
    firstName: string;
    /**
     * The last name of the user
     */
    lastName: string;
    /**
     * The nickname of the user
     */
    nickname?: string;
};

export type ProductCategoryResponse = {
    /**
     * The unique id of the entity.
     */
    id: number;
    /**
     * The creation Date of the entity.
     */
    createdAt?: string;
    /**
     * The last update Date of the entity.
     */
    updatedAt?: string;
    /**
     * The version of the entity.
     */
    version?: number;
    /**
     * The name of the productCategory.
     */
    name: string;
    parent?: ProductCategoryResponse;
};

export type ProductResponse = {
    /**
     * The unique id of the entity.
     */
    id: number;
    /**
     * The creation Date of the entity.
     */
    createdAt?: string;
    /**
     * The last update Date of the entity.
     */
    updatedAt?: string;
    /**
     * The version of the entity.
     */
    version?: number;
    /**
     * The name of the product.
     */
    name: string;
    priceInclVat: DineroObjectResponse;
    vat: BaseVatGroupResponse;
    /**
     * The product revision ID
     */
    revision: number;
    owner: BaseUserResponse;
    category: ProductCategoryResponse;
    priceExclVat: DineroObjectResponse;
    /**
     * The URL to the picture representing this product.
     */
    image?: string;
    /**
     * The percentage of alcohol in this product.
     */
    alcoholPercentage: number;
    /**
     * If product is featured
     */
    featured: boolean;
    /**
     * If product is preferred
     */
    preferred: boolean;
    /**
     * If product is shown on narrow casting screens
     */
    priceList: boolean;
};

export type ExternalUrls = {
    spotify: string;
};

export type Followers = {
    href: string | null;
    total: number;
};

export type Image = {
    url: string;
    height: number;
    width: number;
};

export type SpotifyUserProfile = {
    display_name: string;
    email: string;
    external_urls: ExternalUrls;
    followers: Followers;
    href: string;
    id: string;
    images: Array<Image>;
    type: string;
    uri: string;
    country: string;
    explicit_content: {
        filter_locked: boolean;
        filter_enabled: boolean;
    };
    product: string;
};

export type SpotifyUserResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
    spotifyId: string;
    active: boolean;
};

export type TrackChangeEvent = {
    title: string;
    artists: Array<string>;
    startTime: string;
    cover?: string;
    trackURI: string;
};

export type HexColor = string;

export type IFile = {
    /**
     * In which directory on disk (relative to the root directory) this file is stored
     */
    relativeDirectory: string;
    /**
     * Name of the file on disk
     */
    name: string;
    /**
     * Original name of the file
     */
    originalName: string;
};

export type ISettings = {
    SudoSOS: boolean;
    'SudoSOS.BorrelmodePOSID': number;
    'SudoSOS.BACGroupID': number;
    /**
     * Whether Centurion Mode should be available/present.
     */
    Centurion: boolean;
    /**
     * IDs of all light switches that should be activated when a discoball
     * should be turned on.
     */
    'Centurion.DiscoballLightsSwitchIds': Array<number>;
    /**
     * Whether Time Trail Race (Spoelbakkenrace) should be available/present.
     */
    TimeTrailRace: boolean;
    RoomResponsibleLegacyScreenURL: string;
    /**
     * Whether the screen poster handler should be enabled.
     */
    Poster: boolean;
    /**
     * Whether the bottom progress bar should be minimal by default.
     */
    'Poster.DefaultMinimal': boolean;
    'Poster.DefaultProgressBarColor': HexColor;
    /**
     * Whether the progress bar color can be overriden by individual posters.
     */
    'Poster.ProgressBarPosterColors': boolean;
    /**
     * The logo that should be shown in the bottom left corner of the progress bar.
     * Can be kept clear to imply no logo should be used.
     */
    'Poster.ProgressBarLogo': IFile | '';
    /**
     * Whether "borrel mode" is present, namely a toggle adding an extra set of
     * posters to the rotation.
     */
    'Poster.BorrelModePresent': boolean;
    /**
     * Custom stylesheet defining the layout of the poster screen progress bar.
     */
    'Poster.CustomStylesheet': IFile | '';
    /**
     * Whether the double-dots (:) in the middle of the clock should flicker
     */
    'Poster.ClockShouldTick': boolean;
    Orders: boolean;
    'Orders.DefaultTimeoutSeconds': number;
    /**
     * @deprecated
     */
    'Orders.WebhookPublicKeyURL': string;
    /**
     * @deprecated
     */
    'Orders.WebhookPublicKeyExpirySeconds': number;
};

export type ServerSettingResponse = {
    key: 'SudoSOS' | 'SudoSOS.BorrelmodePOSID' | 'SudoSOS.BACGroupID' | 'Centurion' | 'Centurion.DiscoballLightsSwitchIds' | 'TimeTrailRace' | 'RoomResponsibleLegacyScreenURL' | 'Poster' | 'Poster.DefaultMinimal' | 'Poster.DefaultProgressBarColor' | 'Poster.ProgressBarPosterColors' | 'Poster.ProgressBarLogo' | 'Poster.BorrelModePresent' | 'Poster.CustomStylesheet' | 'Poster.ClockShouldTick' | 'Orders' | 'Orders.DefaultTimeoutSeconds' | 'Orders.WebhookPublicKeyURL' | 'Orders.WebhookPublicKeyExpirySeconds';
    value: unknown;
};

export type SetServerSettingRequest = {
    value: unknown;
    key: string;
};

export type FeatureFlagResponse = Array<{
    value: boolean;
    key: string;
}>;

/**
 * Make all properties in T optional
 */
export type PartialRecordSocketioNamespacesString = {
    '/'?: string;
    '/audio'?: string;
    '/screen'?: string;
    '/lights'?: string;
    '/public'?: string;
};

export type ScreenResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
    socketIds?: PartialRecordSocketioNamespacesString;
};

export type ScreenCreateParams = {
    name: string;
    defaultHandler: string;
};

export type StrobeProps = {
    /**
     * Duration in milliseconds
     */
    durationMs?: number;
};

export type GroupFixtureDimmingParams = {
    /**
     * Relative brightness of the fixture(s). Value in range [0, 1]
     */
    relativeBrightness: number;
};

export type GroupFixtureOverrideParams = {
    /**
     * Slice of DMX channel values that should be send to the fixture.
     * The first value will be put on CH1, the second on CH2, the third on CH3, etc.
     * Use "null" to indicate the channel should not be overriden.
     */
    dmxValues: Array<number | null>;
};

export type LightsControllerResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
    socketIds?: PartialRecordSocketioNamespacesString;
};

export type LightsControllerCreateParams = {
    name: string;
};

export type LightsSwitchResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
    /**
     * DMX channel this lights switch is on
     */
    dmxChannel: number;
    /**
     * DMX value to send to the channel to turn on the switch
     */
    onValue: number;
};

export type ShutterChannelValuesResponse = {
    open?: number;
    strobe?: number;
};

export type ParResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
    nrChannels: number;
    canReset: boolean;
    resetChannel?: number;
    resetChannelValue?: number;
    shutterChannelValues: ShutterChannelValuesResponse;
    masterDimChannel?: number;
    shutterChannel?: number;
    redChannel: number;
    blueChannel: number;
    greenChannel: number;
    coldWhiteChannel?: number;
    warmWhiteChannel?: number;
    amberChannel?: number;
    uvChannel?: number;
};

export type FixtureInGroupResponseParResponse = {
    fixture: ParResponse;
    id: number;
    firstChannel: number;
    positionX: number;
    positionY: number;
    masterDimmer: number;
};

export type MovingHeadRgbResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
    nrChannels: number;
    canReset: boolean;
    resetChannel?: number;
    resetChannelValue?: number;
    shutterChannelValues: ShutterChannelValuesResponse;
    panChannel: number;
    finePanChannel?: number | null;
    tiltChannel: number;
    fineTiltChannel?: number | null;
    movingSpeedChannel?: number | null;
    masterDimChannel?: number;
    shutterChannel?: number;
    redChannel: number;
    blueChannel: number;
    greenChannel: number;
    coldWhiteChannel?: number;
    warmWhiteChannel?: number;
    amberChannel?: number;
    uvChannel?: number;
};

export type FixtureInGroupResponseMovingHeadRgbResponse = {
    fixture: MovingHeadRgbResponse;
    id: number;
    firstChannel: number;
    positionX: number;
    positionY: number;
    masterDimmer: number;
};

export enum WheelColor {
    WHITE = 'white',
    RED = 'red',
    GREEN = 'green',
    BLUE = 'blue',
    YELLOW = 'yellow',
    LIGHTBLUE = 'lightblue',
    ORANGE = 'orange',
    ROSERED = 'rosered'
}

export type MovingHeadWheelColorChannelValueResponse = {
    color: WheelColor;
    channelValue: number;
};

export type MovingHeadWheelResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
    nrChannels: number;
    canReset: boolean;
    resetChannel?: number;
    resetChannelValue?: number;
    shutterChannelValues: ShutterChannelValuesResponse;
    panChannel: number;
    finePanChannel?: number | null;
    tiltChannel: number;
    fineTiltChannel?: number | null;
    movingSpeedChannel?: number | null;
    masterDimChannel: number;
    shutterChannel?: number;
    wheelColorChannel: number;
    wheelColorChannelValues: Array<MovingHeadWheelColorChannelValueResponse>;
    wheelGoboChannel: number;
    gobos: Array<string>;
    wheelGoboRotateChannel: number | null;
    goboRotates: Array<string>;
};

export type FixtureInGroupResponseMovingHeadWheelResponse = {
    fixture: MovingHeadWheelResponse;
    id: number;
    firstChannel: number;
    positionX: number;
    positionY: number;
    masterDimmer: number;
};

export type LightsGroupResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
    controller: LightsControllerResponse;
    gridSizeX: number;
    gridSizeY: number;
    pars: Array<FixtureInGroupResponseParResponse>;
    movingHeadRgbs: Array<FixtureInGroupResponseMovingHeadRgbResponse>;
    movingHeadWheels: Array<FixtureInGroupResponseMovingHeadWheelResponse>;
};

export type LightsInGroup = {
    fixtureId: number;
    firstChannel: number;
    /**
     * Position of the fixture within the group's grid/line
     */
    positionX: number;
    /**
     * Position of the fixture within the group's grid.
     * Should be undefined if the group is a line of fixtures
     * (and not a grid).
     */
    positionY?: number;
};

export type LightsGroupCreateParams = {
    name: string;
    defaultHandler: string;
    /**
     * Size (width) of the X axis where all the fixtures are positioned.
     * All fixtures should have their positionX be in range [0, gridSizeX).
     */
    gridSizeX: number;
    /**
     * Size (width) of the Y axis where all the fixtures are positioned.
     * 0 if the lights are positioned in a line (and not in a grid)
     */
    gridSizeY?: number;
    pars: Array<LightsInGroup>;
    movingHeadRgbs: Array<LightsInGroup>;
    movingHeadWheels: Array<LightsInGroup>;
};

export type LightsSwitchCreateParams = {
    name: string;
    /**
     * DMX channel this lights switch is on
     */
    dmxChannel: number;
    /**
     * DMX value to send to the channel to turn on the switch
     */
    onValue: number;
};

export type ShutterOptionValues = {
    open: number;
    strobe: number;
};

export type LightsParCreateParams = {
    name: string;
    nrChannels: number;
    shutterOptionValues?: ShutterOptionValues;
    masterDimChannel?: number;
    shutterChannel?: number;
    colorRedChannel: number;
    colorGreenChannel: number;
    colorBlueChannel: number;
    colorColdWhiteChannel?: number;
    colorWarmWhiteChannel?: number;
    colorAmberChannel?: number;
    colorUvChannel?: number;
};

export type LightsMovingHeadRgbCreateParams = {
    name: string;
    nrChannels: number;
    shutterOptionValues?: ShutterOptionValues;
    panChannel: number;
    finePanChannel?: number;
    tiltChannel: number;
    fineTiltChannel?: number;
    movingSpeedChannel?: number;
    basePanValue?: number;
    masterDimChannel?: number;
    shutterChannel?: number;
    colorRedChannel: number;
    colorGreenChannel: number;
    colorBlueChannel: number;
    colorColdWhiteChannel?: number;
    colorWarmWhiteChannel?: number;
    colorAmberChannel?: number;
    colorUvChannel?: number;
};

export type LightsMovingHeadWheelCreateParams = {
    name: string;
    nrChannels: number;
    shutterOptionValues?: ShutterOptionValues;
    panChannel: number;
    finePanChannel?: number;
    tiltChannel: number;
    fineTiltChannel?: number;
    movingSpeedChannel?: number;
    basePanValue?: number;
    masterDimChannel: number;
    shutterChannel?: number;
    colorWheelChannel: number;
    colorWheelChannelValues: Array<{
        value: number;
        name: string;
    }>;
    goboWheelChannel: number;
    goboWheelChannelValues: Array<{
        value: number;
        name: string;
    }>;
    goboRotateChannel?: number;
    goboRotateChannelValues: Array<{
        value: number;
        name: string;
    }>;
};

export enum RgbColor {
    WHITE = 'white',
    RED = 'red',
    GREEN = 'green',
    BLUE = 'blue',
    YELLOW = 'yellow',
    LIGHTBLUE = 'lightblue',
    ORANGE = 'orange',
    ROSERED = 'rosered',
    PURPLE = 'purple',
    CYAN = 'cyan',
    PINK = 'pink',
    GOLD = 'gold',
    BROWN = 'brown',
    LIGHTPINK = 'lightpink',
    LIME = 'lime',
    UV = 'uv',
    BLINDINGWHITE = 'blindingwhite'
}

/**
 * Make all properties in T required
 */
export type RequiredIColorsRgb = {
    redChannel: number;
    greenChannel: number;
    blueChannel: number;
    coldWhiteChannel: number;
    warmWhiteChannel: number;
    amberChannel: number;
    uvChannel: number;
};

export type RgbColorSpecification = {
    hex: HexColor;
    complementary: Array<RgbColor>;
    alternative: WheelColor;
    definition: RequiredIColorsRgb;
};

export type LightsColorResponse = {
    color: RgbColor;
    spec: RgbColorSpecification;
};

export type AudioResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
    socketIds?: PartialRecordSocketioNamespacesString;
};

export type AudioCreateParams = {
    name: string;
    defaultHandler: string;
};

export type SetAudioPlayingParams = {
    playing: boolean;
};

export type HandlerResponseAudioResponse = {
    entities: Array<AudioResponse>;
    id: string;
    name: string;
};

export type NewHandlerParams = {
    name: string;
};

export type HandlerResponseLightsGroupResponse = {
    entities: Array<LightsGroupResponse>;
    id: string;
    name: string;
};

export type HandlerResponseScreenResponse = {
    entities: Array<ScreenResponse>;
    id: string;
    name: string;
};

export type IntegrationUserResponse = {
    id: number;
    name: string;
    /**
     * List of endpoints (operationIds) this user can access
     */
    endpoints: Array<string>;
    lastSeen: string | null;
};

export type IntegrationUserCreateRequest = {
    name: string;
    /**
     * List of endpoints (operationIds) this user can access
     */
    endpoints: Array<string>;
};

export type IntegrationUserUpdateRequest = {
    name?: string;
    /**
     * List of endpoints (operationIds) this user can access
     */
    endpoints?: Array<string>;
};

export type Order = {
    number: number;
    startTime: string;
    timeoutSeconds: number;
};

export type OrderRequest = {
    orderNumber: number;
    timeoutSeconds?: number;
};

export type CenturionParams = {
    lightsGroupIds: Array<number>;
    screenIds: Array<number>;
    audioIds: Array<number>;
    centurionName: string;
    centurionArtist: string;
};

export type TimeTrailRaceParams = {
    lightsGroupIds: Array<number>;
    screenIds: Array<number>;
    audioIds: Array<number>;
    sessionName: string;
};

export enum TimeTrailRaceState {
    INITIALIZED = 'INITIALIZED',
    PLAYER_REGISTERED = 'PLAYER_REGISTERED',
    PLAYER_READY = 'PLAYER_READY',
    STARTED = 'STARTED',
    FINISHED = 'FINISHED',
    SCOREBOARD = 'SCOREBOARD'
}

export type ScoreboardItem = {
    name: string;
    alcoholFree: boolean;
    bac: boolean;
    uuid: string;
    /**
     * Finish time (in ms)
     */
    timeMs: number;
};

export type RaceBaseEvent = {
    sessionName: string;
};

export enum TimeTrailRaceStatePlayerRegistered {
    PLAYER_REGISTERED = 'PLAYER_REGISTERED'
}

export type PlayerParams = {
    name: string;
    alcoholFree: boolean;
    bac: boolean;
    uuid: string;
};

export type RacePlayerRegisteredEvent = RaceBaseEvent & {
    scoreboard: Array<ScoreboardItem>;
    player: PlayerParams;
    state: TimeTrailRaceStatePlayerRegistered;
};

export type ModeDisabledError = {
    name: string;
    message: string;
    stack?: string;
};

export type InvalidStateError = {
    name: string;
    message: string;
    stack?: string;
};

export type RegisterPlayerParams = {
    name: string;
    alcoholFree: boolean;
    bac: boolean;
};

export enum TimeTrailRaceStatePlayerReady {
    PLAYER_READY = 'PLAYER_READY'
}

export type RacePlayerReadyEvent = RaceBaseEvent & {
    player: PlayerParams;
    state: TimeTrailRaceStatePlayerReady;
};

export enum TimeTrailRaceStateStarted {
    STARTED = 'STARTED'
}

export type RaceStartedEvent = RaceBaseEvent & {
    startTime: string;
    player: PlayerParams;
    state: TimeTrailRaceStateStarted;
};

export enum TimeTrailRaceStateFinished {
    FINISHED = 'FINISHED'
}

export type RaceFinishedEvent = RaceBaseEvent & {
    scoreboard: Array<ScoreboardItem>;
    player: ScoreboardItem;
    state: TimeTrailRaceStateFinished;
};

export enum TimeTrailRaceStateScoreboard {
    SCOREBOARD = 'SCOREBOARD'
}

export type RaceScoreboardEvent = RaceBaseEvent & {
    player?: ScoreboardItem;
    scoreboard: Array<ScoreboardItem>;
    state: TimeTrailRaceStateScoreboard;
};

export type CenturionResponse = {
    name: string;
    startTime: string;
    playing: boolean;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
export type PickMixTapeNameOrArtistOrCoverUrl = {
    name: string;
    /**
     * Arist and tape name combination should be unique
     */
    artist: string;
    /**
     * Relative or absolute HTTP path to the cover image
     */
    coverUrl: string;
};

export type HornData = {
    /**
     * Time the lights should strobe in milliseconds
     */
    strobeTime?: number;
    counter: number;
};

export type HornEvent = {
    type: 'horn';
    timestamp: number;
    data: HornData;
};

export type SongData = {
    /**
     * Tempo of the song. Defaults to 130 beats per minute
     */
    bpm?: number;
    title: string;
    /**
     * Performing artists, comma-separated if multiple
     */
    artist: string;
};

export type SongEvent = {
    type: 'song';
    timestamp: number;
    data: SongData | Array<SongData>;
};

export type CenturionStateResponse = {
    tape?: PickMixTapeNameOrArtistOrCoverUrl;
    lastHorn?: HornEvent;
    lastSong?: SongEvent;
    colors?: Array<RgbColor>;
    playing: boolean;
};

export type SkipCenturionRequest = {
    seconds: number;
};

export type MixTapeResponse = {
    name: string;
    /**
     * Arist and tape name combination should be unique
     */
    artist: string;
    /**
     * Relative or absolute HTTP path to the cover image
     */
    coverUrl: string;
    events: Array<HornEvent | SongEvent>;
    /**
     * Amount of horns
     */
    horns: number;
    /**
     * Duration of the mix tape
     */
    duration: number;
};

export enum FooterSize {
    FULL = 'full',
    MINIMAL = 'minimal',
    HIDDEN = 'hidden'
}

export type BasePoster = {
    id: string;
    name: string;
    label: string;
    due?: string;
    timeout: number;
    footer: FooterSize;
    /**
     * Whether this poster should only be shown when in BorrelMode
     */
    borrelMode?: boolean;
    color?: string;
};

export enum PosterTypeAgenda {
    AGENDA = 'agenda'
}

export enum PosterTypeInfima {
    INFIMA = 'infima'
}

export enum PosterTypeLogo {
    LOGO = 'logo'
}

export enum PosterTypeTrains {
    TRAIN = 'train'
}

export enum PosterTypeBorrelLogo {
    BORREL_LOGO = 'borrel-logo'
}

export enum PosterTypeBorrelPriceList {
    BORREL_PRICE_LIST = 'borrel-price-list'
}

export enum PosterTypeBorrelWallOfShame {
    BORREL_WALL_OF_SHAME = 'borrel-wall-of-shame'
}

export enum PosterTypeOlympics {
    OLYMPICS = 'olympics'
}

export enum PosterTypeUnknown {
    UNKNOWN = 'unknown'
}

export type LocalPosterType = PosterTypeAgenda | PosterTypeInfima | PosterTypeLogo | PosterTypeTrains | PosterTypeBorrelLogo | PosterTypeBorrelPriceList | PosterTypeBorrelWallOfShame | PosterTypeOlympics | PosterTypeUnknown;

export type LocalPoster = BasePoster & {
    type: LocalPosterType;
};

export enum PosterTypeImage {
    IMG = 'img'
}

export enum PosterTypeVideo {
    VIDEO = 'video'
}

export enum PosterTypeExternal {
    EXTERN = 'extern'
}

export type MediaPoster = BasePoster & {
    source: Array<string>;
    type: PosterTypeImage | PosterTypeVideo | PosterTypeExternal;
};

export enum PosterTypePhoto {
    PHOTO = 'photo'
}

export type PhotoPoster = BasePoster & {
    albums: Array<number>;
    type: PosterTypePhoto;
};

export enum PosterTypeError {
    ERROR = 'error'
}

export type ErrorPoster = BasePoster & {
    message: string;
    type: PosterTypeError;
};

export type Poster = LocalPoster | MediaPoster | PhotoPoster | ErrorPoster;

export type PosterResponse = {
    posters: Array<Poster>;
    borrelMode: boolean;
};

export type BorrelModeResponse = {
    enabled: boolean;
    present: boolean;
};

export type BorrelModeParams = {
    enabled: boolean;
};

export type TrainResponse = {
    direction: string;
    plannedDateTime: string;
    delay: number;
    trainType: string;
    operator: string;
    cancelled: boolean;
    routeStations: Array<string>;
    messages: Array<{
        message: string;
        style: string;
    }>;
};

export type PhotoResponse = {
    label: string;
    url: string;
};

export type GewisPhotoAlbumParams = {
    albumIds: Array<number>;
};

export type MedalTableRecord = {
    countryName: string;
    flagUrl: string;
    rank?: number;
    gold: number;
    silver: number;
    bronze: number;
    total: number;
};

export type OlympicMedal = {
    participantId: number;
    eventId: number;
    participantName: string;
    sportName: string;
    eventName: string;
    medal: 'gold' | 'silver' | 'bronze';
};

export type CountryMedalResponse = {
    countryName: string;
    flagUrl: string;
    rank?: number;
    gold: number;
    silver: number;
    bronze: number;
    total: number;
    medals: Array<OlympicMedal>;
};

export type PosterScreenSettingsResponse = {
    defaultMinimal: boolean;
    defaultProgressBarColor: HexColor;
    progressBarLogo: boolean;
    stylesheet: boolean;
    clockShouldTick: boolean;
};

export type FileResponse = {
    location: string;
    name: string;
};

export type LocalPosterResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    file?: FileResponse;
    uri?: string;
};

export type StaticPosterHandlerState = {
    activePoster: LocalPosterResponse | null;
    clockVisible: boolean;
};

export type SetClockRequest = {
    visible: boolean;
};

export type BaseLightsEffectCreateParams = {
    [key: string]: unknown;
};

export enum ColorEffectsBackgroundPulse {
    BACKGROUND_PULSE = 'BackgroundPulse'
}

export type BackgroundPulseProps = {
    /**
     * One or more colors that should be shown
     */
    colors: Array<RgbColor>;
    /**
     * What percentage (on average) of the lights should be turned on
     */
    ratio?: number;
    /**
     * How many ms the lights should take to turn on and aff
     */
    pulseDuration?: number;
    /**
     * After how many ms (approximately) a ratio of lights should start pulsing.
     */
    cycleTime?: number;
};

export type BackgroundPulseCreateParams = BaseLightsEffectCreateParams & {
    props: BackgroundPulseProps;
    type: ColorEffectsBackgroundPulse;
};

export enum ColorEffectsBeatFadeOut {
    BEAT_FADE_OUT = 'BeatFadeOut'
}

export enum LightsEffectPattern {
    HORIZONTAL = 'horizontal',
    VERTICAL = 'vertical',
    DIAGONAL_BOTTOM_LEFT_TO_TOP_RIGHT = 'diagonal_bottom_left_to_top_right',
    DIAGONAL_TOP_LEFT_TO_BOTTOM_RIGHT = 'diagonal_top_left_to_bottom_right',
    CENTERED_CIRCULAR = 'centered_circular',
    CENTERED_SQUARED = 'centered_squared',
    ROTATIONAL = 'rotational'
}

export enum LightsEffectDirection {
    FORWARDS = 'forwards',
    BACKWARDS = 'backwards'
}

export type BeatFadeOutProps = {
    /**
     * One or more colors that should be shown
     */
    colors: Array<RgbColor>;
    pattern?: LightsEffectPattern;
    direction?: LightsEffectDirection;
    /**
     * Whether the lights should be turned off using a fade effect
     * on each beat
     */
    enableFade?: boolean;
    /**
     * How many "black" fixtures should be added. Zero for no blacks
     */
    nrBlacks?: number;
    /**
     * Amount of time it takes before the lights switch to the next state (in ms). If undefined,
     * beats will be used for switching states
     */
    customCycleTime?: number;
};

export type BeatFadeOutCreateParams = BaseLightsEffectCreateParams & {
    props: BeatFadeOutProps;
    type: ColorEffectsBeatFadeOut;
};

export type FireProps = {
    [key: string]: never;
};

export type FireCreateParams = BaseLightsEffectCreateParams & {
    props: FireProps;
    type: 'Fire';
};

export enum ColorEffectsRandomColor {
    RANDOM_COLOR = 'RandomColor'
}

export type RandomColorProps = {
    /**
     * One or more colors that should be shown
     */
    colors: Array<RgbColor>;
    /**
     * How many "black" fixtures should be added. Zero for no blacks
     */
    nrBlacks?: number;
    /**
     * Amount of time it takes before the lights switch to the next state (in ms). If undefined,
     * beats will be used for switching states
     */
    customCycleTime?: number;
};

export type RandomColorCreateParams = BaseLightsEffectCreateParams & {
    props: RandomColorProps;
    type: ColorEffectsRandomColor;
};

export enum ColorEffectsSingleFlood {
    SINGLE_FLOOD = 'SingleFlood'
}

export type SingleFloodProps = {
    color?: RgbColor;
    /**
     * In how many milliseconds the lights should turn off with a dim effect
     */
    dimMilliseconds?: number;
};

export type SingleFloodCreateParams = BaseLightsEffectCreateParams & {
    props: SingleFloodProps;
    type: ColorEffectsSingleFlood;
};

export enum ColorEffectsSparkle {
    SPARKLE = 'Sparkle'
}

export type SparkleProps = {
    /**
     * One or more colors that should be shown
     */
    colors: Array<RgbColor>;
    /**
     * What percentage (on average) of the lights should be turned on
     */
    ratio?: number;
    /**
     * How many ms the light should take to slowly turn off
     */
    dimDuration?: number;
    /**
     * After how many ms (approximately) a ratio of lights should be turned on.
     * Defaults to 0, which enables the ratio of lights on the beat of the music.
     */
    cycleTime?: number;
};

export type SparkleCreateParams = BaseLightsEffectCreateParams & {
    props: SparkleProps;
    type: ColorEffectsSparkle;
};

export enum ColorEffectsStaticColor {
    STATIC_COLOR = 'StaticColor'
}

export type StaticColorProps = {
    color: RgbColor;
    /**
     * Name of the gobo that should be used (nothing by default)
     */
    gobo?: string;
    /**
     * Name of the gobo rotate that should be used (nothing by default)
     */
    goboRotate?: string;
    /**
     * Whether to toggle each fixture on/off on the beat of the music (false by default)
     */
    beatToggle?: boolean;
    /**
     * Brightness (1 by default)
     */
    relativeBrightness?: number;
    /**
     * In how many ms the fixture should light up to the relativeBrightness on effect start.
     * Disabled if undefined
     */
    brightenTimeMs?: number;
    /**
     * In how many ms the fixture should dim from the relativeBrightness on effect start.
     * Disabled if undefined or if brightenTimeMs is not undefined
     */
    dimTimeMs?: number;
};

export type StaticColorCreateParams = BaseLightsEffectCreateParams & {
    props: StaticColorProps;
    type: ColorEffectsStaticColor;
};

export enum ColorEffectsStrobe {
    STROBE = 'Strobe'
}

export type StrobeCreateParams = BaseLightsEffectCreateParams & {
    props: StrobeProps;
    type: ColorEffectsStrobe;
};

export enum ColorEffectsWave {
    WAVE = 'Wave'
}

export type WaveProps = {
    /**
     * One or more colors that should be shown
     */
    colors: Array<RgbColor>;
    pattern?: LightsEffectPattern;
    direction?: LightsEffectDirection;
    /**
     * Number of waves, ignored if singleWave=true (1 by default)
     */
    nrWaves?: number;
    /**
     * How many ms each cycle of the wave takes (1000ms by default)
     */
    cycleTime?: number;
    /**
     * Whether the animation should only be executed once from start to finish
     * instead of a continuous animation (false by default)
     */
    singleWave?: boolean;
};

export type WaveCreateParams = BaseLightsEffectCreateParams & {
    props: WaveProps;
    type: ColorEffectsWave;
};

export type LightsEffectsColorCreateParams = BackgroundPulseCreateParams | BeatFadeOutCreateParams | FireCreateParams | RandomColorCreateParams | SingleFloodCreateParams | SparkleCreateParams | StaticColorCreateParams | StrobeCreateParams | WaveCreateParams;

export type ColorsRequest = {
    colors: Array<RgbColor>;
};

export enum MovementEffectsSearchLight {
    SEARCH_LIGHT = 'SearchLight'
}

export type SearchLightProps = {
    /**
     * Time for the moving head to go around (in milliseconds)
     */
    cycleTime?: number;
    /**
     * What phase the lights should move apart from each other. 0 for synchronous
     */
    offsetFactor?: number;
    pattern?: LightsEffectPattern;
    direction?: LightsEffectDirection;
    /**
     * Radius of the search light
     */
    radiusFactor?: number;
};

export type SearchLightCreateParams = BaseLightsEffectCreateParams & {
    props: SearchLightProps;
    type: MovementEffectsSearchLight;
};

export enum MovementEffectsTableRotate {
    TABLE_ROTATE = 'TableRotate'
}

export type TableRotateProps = {
    /**
     * Time for the moving head to go around (in milliseconds)
     */
    cycleTime?: number;
    /**
     * What phase the lights should move apart from each other. 0 for synchronous
     */
    offsetFactor?: number;
    pattern?: LightsEffectPattern;
    direction?: LightsEffectDirection;
};

export type TableRotateCreateParams = BaseLightsEffectCreateParams & {
    props: TableRotateProps;
    type: MovementEffectsTableRotate;
};

export enum MovementEffectsClassicRotate {
    CLASSIC_ROTATE = 'ClassicRotate'
}

export type ClassicRotateProps = {
    /**
     * Time for the moving head to go around (in milliseconds)
     */
    cycleTime?: number;
    /**
     * What phase the lights should move apart from each other. 0 for synchronous
     */
    offsetFactor?: number;
    pattern?: LightsEffectPattern;
    direction?: LightsEffectDirection;
};

export type ClassicRotateCreateParams = BaseLightsEffectCreateParams & {
    props: ClassicRotateProps;
    type: MovementEffectsClassicRotate;
};

export enum MovementEffectsRandomPosition {
    RANDOM_POSITION = 'RandomPosition'
}

export type RandomPositionProps = {
    /**
     * After how many beats the light will move to a new position
     */
    beatsToMove?: number;
};

export type RandomPositionCreateParams = BaseLightsEffectCreateParams & {
    props: RandomPositionProps;
    type: MovementEffectsRandomPosition;
};

export enum MovementEffectsFixedPosition {
    FIXED_POSITION = 'FixedPosition'
}

export type FixedPositionPropsAbs = {
    /**
     * Relative tilt value of the moving heads. Any decimals are applied to the fineTilt if it exists.
     */
    tilt: number;
    /**
     * Absolute pan value of the moving heads. Any decimals are applied to the finePan if it exists.
     */
    pan: number;
    variant: 'Absolute';
};

export type FixedPositionPropsRel = {
    /**
     * Relative tilt value of the moving heads. Any decimals are applied to the fineTilt if it exists.
     */
    tilt: number;
    /**
     * Relative pan value of the moving heads. Any decimals are applied to the finePan if it exists.
     */
    pan: number;
    variant: 'Relative';
};

export type FixedPositionProps = FixedPositionPropsAbs | FixedPositionPropsRel;

export type FixedPositionCreateParams = BaseLightsEffectCreateParams & {
    props: FixedPositionProps;
    type: MovementEffectsFixedPosition;
};

export enum MovementEffectsZigZag {
    ZIG_ZAG = 'ZigZag'
}

export type ZigZagProps = {
    /**
     * Time for the moving head to go around (in milliseconds)
     */
    cycleTime?: number;
    /**
     * What phase the lights should move apart from each other. 0 for synchronous
     */
    offsetFactor?: number;
    pattern?: LightsEffectPattern;
    direction?: LightsEffectDirection;
    /**
     * How much the moving head should pan to the left and right
     */
    horizontalRadius?: number;
    /**
     * How much the moving head should tilt up and down
     */
    verticalRadius?: number;
};

export type ZigZagCreateParams = BaseLightsEffectCreateParams & {
    props: ZigZagProps;
    type: MovementEffectsZigZag;
};

export type LightsEffectsMovementCreateParams = SearchLightCreateParams | TableRotateCreateParams | ClassicRotateCreateParams | RandomPositionCreateParams | FixedPositionCreateParams | ZigZagCreateParams;

export type LightsButtonColors = {
    /**
     * Lights groups to which these colors should be immediately applied to
     */
    lightsGroupIds?: Array<number>;
    colors: Array<RgbColor>;
    type: 'LightsButtonColors';
};

export type LightsButtonEffectColor = {
    lightsGroupIds: Array<number>;
    effectProps: LightsEffectsColorCreateParams;
    type: 'LightsButtonEffectColor';
};

export type LightsButtonEffectMovement = {
    lightsGroupIds: Array<number>;
    effectProps: LightsEffectsMovementCreateParams;
    type: 'LightsButtonEffectMovement';
};

export type LightsButtonReset = {
    lightsGroupIds: Array<number>;
    type: 'LightsButtonReset';
};

export type LightsButtonSwitch = {
    switchIds: Array<number>;
    type: 'LightsButtonSwitch';
};

export type LightsButtonStrobe = {
    lightsGroupIds: Array<number>;
    type: 'LightsButtonStrobe';
};

export type LightsButtonNull = {
    type: 'LightsButtonNull';
};

export type LightsPredefinedEffectProperties = LightsButtonColors | LightsButtonEffectColor | LightsButtonEffectMovement | LightsButtonReset | LightsButtonSwitch | LightsButtonStrobe | LightsButtonNull;

export type LightsPredefinedEffectResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    buttonId: number;
    icon?: string | null;
    name?: string | null;
    properties: LightsPredefinedEffectProperties;
};

export type LightsPredefinedEffectCreateParams = {
    name?: string;
    buttonId: number;
    properties: LightsPredefinedEffectProperties;
    icon?: string;
};

export type LightsPredefinedEffectUpdateParams = {
    name?: string;
    buttonId?: number;
    properties?: LightsPredefinedEffectProperties;
    icon?: string;
};

export type BaseLightsGroupResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    name: string;
};

export type LightsSceneEffectResponse = {
    effectName: string;
    lightsGroups: Array<BaseLightsGroupResponse>;
};

export type LightsSceneResponse = {
    id: number;
    name: string;
    favorite: boolean;
    effects: Array<LightsSceneEffectResponse>;
};

export type LightsSceneEffectParams = {
    lightsGroups: Array<number>;
} & (LightsEffectsColorCreateParams | LightsEffectsMovementCreateParams);

export type CreateSceneParams = {
    name: string;
    favorite: boolean;
    effects: Array<LightsSceneEffectParams>;
};

export type AuditLogEntryResponse = {
    id: number;
    createdAt: string;
    updatedAt: string;
    userId: string;
    userName: string;
    action: string;
};

export type PersonalDataResponse = {
    userId: string;
    auditLogs: Array<AuditLogEntryResponse>;
};

export type ArtificialBeatGeneratorParams = {
    /**
     * Beats per minute
     */
    bpm: number;
};

export enum SecurityGroup {
    ADMIN = 'admin',
    BOARD = 'board',
    KEY_HOLDER = 'key-holder',
    BAC = 'bac',
    AVICO = 'avico',
    SCREEN_SUBSCRIBER = 'screen-subscriber',
    AUDIO_SUBSCRIBER = 'audio-subscriber',
    LIGHTS_SUBSCRIBER = 'lights-subscriber',
    INTEGRATION_USER = 'integration-user'
}

export type AuthUser = {
    id: string;
    name: string;
    roles: Array<SecurityGroup>;
    /**
     * List of accessible endpoints if integration user
     */
    endpoints?: Array<string>;
    audioId?: number;
    lightsControllerId?: number;
    screenId?: number;
    integrationUserId?: number;
};

export type HttpApiException = {
    name: string;
    message: string;
    stack?: string;
    statusCode: number;
};

/**
 * The OidcConfig contains the details needed to authenticate with keycloak
 * These variables are based on the environment variables, and might differ
 * from system to system.
 */
export type OidcConfig = {
    /**
     * The client id of the keycloak application
     */
    clientId: string;
    /**
     * The redirect uri of the keycloak application
     */
    redirectUri: string;
    /**
     * The auth url of the keycloak application
     */
    authUrl: string;
};

export type ISecuritySections = {
    base?: Array<SecurityGroup>;
    privileged?: Array<SecurityGroup>;
    subscriber?: Array<SecurityGroup>;
};

export type ISecurityGroups = {
    user: ISecuritySections;
    audit: ISecuritySections;
    beats: ISecuritySections;
    gdrp: ISecuritySections;
    scenes: ISecuritySections;
    effects: ISecuritySections;
    poster: ISecuritySections;
    roomresponsible: ISecuritySections;
    centurion: ISecuritySections;
    timetrail: ISecuritySections;
    mode: ISecuritySections;
    handler: ISecuritySections;
    audio: ISecuritySections;
    light: ISecuritySections;
    screen: ISecuritySections;
    lightOperation: ISecuritySections;
    spotify: ISecuritySections;
    sudosos: ISecuritySections;
    serverSettings: ISecuritySections;
    orders: ISecuritySections;
    timedEvents: ISecuritySections;
    integrationUsers: ISecuritySections;
};

export type PaginatedAuditLogEntryResponse = {
    records: Array<AuditLogEntryResponse>;
    pagination: {
        count: number;
        skip: number;
        take: number;
    };
};

export type GetAuditLogEntryParams = {
    /**
     * Id of the user
     */
    userId?: string;
    /**
     * Actions
     */
    action?: string;
    /**
     * In what order to return the logs. DESC by default (newest first)
     */
    order?: 'ASC' | 'DESC';
    /**
     * Pagination take
     */
    take?: number;
    /**
     * Pagination skip
     */
    skip?: number;
};

export type OidcParameters = {
    state?: string;
    session_state?: string;
    code?: string;
};

export type ApiKeyParameters = {
    key: string;
};

export type GetAllTimedEventsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/timed-events';
};

export type GetAllTimedEventsResponses = {
    /**
     * Ok
     */
    200: Array<TimedEventResponse>;
};

export type GetAllTimedEventsResponse = GetAllTimedEventsResponses[keyof GetAllTimedEventsResponses];

export type CreateTimedEventData = {
    body: CreateTimedEventRequest;
    path?: never;
    query?: never;
    url: '/timed-events';
};

export type CreateTimedEventResponses = {
    /**
     * Ok
     */
    200: TimedEventResponse;
};

export type CreateTimedEventResponse = CreateTimedEventResponses[keyof CreateTimedEventResponses];

export type DeleteTimedEventData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/timed-events/{id}';
};

export type DeleteTimedEventResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteTimedEventResponse = DeleteTimedEventResponses[keyof DeleteTimedEventResponses];

export type GetSingleTimedEventData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/timed-events/{id}';
};

export type GetSingleTimedEventResponses = {
    /**
     * Ok
     */
    200: TimedEventResponse;
};

export type GetSingleTimedEventResponse = GetSingleTimedEventResponses[keyof GetSingleTimedEventResponses];

export type UpdateTimedEventData = {
    body: UpdateTimedEventRequest;
    path: {
        id: number;
    };
    query?: never;
    url: '/timed-events/{id}';
};

export type UpdateTimedEventResponses = {
    /**
     * Ok
     */
    200: TimedEventResponse;
};

export type UpdateTimedEventResponse = UpdateTimedEventResponses[keyof UpdateTimedEventResponses];

export type GetSudoSosWallOfShameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/sudosos/wall-of-shame';
};

export type GetSudoSosWallOfShameErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type GetSudoSosWallOfShameError = GetSudoSosWallOfShameErrors[keyof GetSudoSosWallOfShameErrors];

export type GetSudoSosWallOfShameResponses = {
    /**
     * Ok
     */
    200: Array<SudoSosDebtorResponse>;
};

export type GetSudoSosWallOfShameResponse = GetSudoSosWallOfShameResponses[keyof GetSudoSosWallOfShameResponses];

export type GetSudoSosPriceListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/sudosos/price-list';
};

export type GetSudoSosPriceListErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type GetSudoSosPriceListError = GetSudoSosPriceListErrors[keyof GetSudoSosPriceListErrors];

export type GetSudoSosPriceListResponses = {
    /**
     * Ok
     */
    200: Array<ProductResponse>;
};

export type GetSudoSosPriceListResponse = GetSudoSosPriceListResponses[keyof GetSudoSosPriceListResponses];

export type SpotifyLoginData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/spotify/login';
};

export type SpotifyLoginResponses = {
    /**
     * No content
     */
    204: void;
};

export type SpotifyLoginResponse = SpotifyLoginResponses[keyof SpotifyLoginResponses];

export type SpotifyLoginCallbackData = {
    body?: never;
    path?: never;
    query: {
        state: string;
        code?: string;
        error?: string;
    };
    url: '/spotify/callback';
};

export type SpotifyLoginCallbackErrors = {
    400: string;
    412: string;
    500: string;
};

export type SpotifyLoginCallbackError = SpotifyLoginCallbackErrors[keyof SpotifyLoginCallbackErrors];

export type SpotifyLoginCallbackResponses = {
    /**
     * Ok
     */
    200: SpotifyUserProfile;
};

export type SpotifyLoginCallbackResponse = SpotifyLoginCallbackResponses[keyof SpotifyLoginCallbackResponses];

export type GetCurrentSpotifyUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/spotify/user/current';
};

export type GetCurrentSpotifyUserResponses = {
    /**
     * Ok
     */
    200: SpotifyUserResponse;
    /**
     * No user active
     */
    204: void;
};

export type GetCurrentSpotifyUserResponse = GetCurrentSpotifyUserResponses[keyof GetCurrentSpotifyUserResponses];

export type GetAllSpotifyUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/spotify/users';
};

export type GetAllSpotifyUsersResponses = {
    /**
     * Ok
     */
    200: Array<SpotifyUserResponse>;
};

export type GetAllSpotifyUsersResponse = GetAllSpotifyUsersResponses[keyof GetAllSpotifyUsersResponses];

export type DeleteSpotifyUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/spotify/users/{id}';
};

export type DeleteSpotifyUserResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteSpotifyUserResponse = DeleteSpotifyUserResponses[keyof DeleteSpotifyUserResponses];

export type SwitchToSpotifyUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/spotify/users/{id}/switch';
};

export type SwitchToSpotifyUserErrors = {
    400: string;
    404: string;
};

export type SwitchToSpotifyUserError = SwitchToSpotifyUserErrors[keyof SwitchToSpotifyUserErrors];

export type SwitchToSpotifyUserResponses = {
    /**
     * No content
     */
    204: void;
};

export type SwitchToSpotifyUserResponse = SwitchToSpotifyUserResponses[keyof SwitchToSpotifyUserResponses];

export type GetSpotifyProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/spotify/profile';
};

export type GetSpotifyProfileResponses = {
    /**
     * Ok
     */
    200: SpotifyUserProfile;
    /**
     * No user active
     */
    204: void;
};

export type GetSpotifyProfileResponse = GetSpotifyProfileResponses[keyof GetSpotifyProfileResponses];

export type GetSpotifyCurrentlyPlayingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/spotify/currently-playing';
};

export type GetSpotifyCurrentlyPlayingResponses = {
    /**
     * Ok
     */
    200: Array<TrackChangeEvent>;
};

export type GetSpotifyCurrentlyPlayingResponse = GetSpotifyCurrentlyPlayingResponses[keyof GetSpotifyCurrentlyPlayingResponses];

export type GetSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/settings';
};

export type GetSettingsResponses = {
    /**
     * Ok
     */
    200: ISettings;
};

export type GetSettingsResponse = GetSettingsResponses[keyof GetSettingsResponses];

export type SetSettingData = {
    body: SetServerSettingRequest;
    path?: never;
    query?: never;
    url: '/settings';
};

export type SetSettingErrors = {
    400: string;
};

export type SetSettingError = SetSettingErrors[keyof SetSettingErrors];

export type SetSettingResponses = {
    /**
     * Ok
     */
    200: ServerSettingResponse;
};

export type SetSettingResponse = SetSettingResponses[keyof SetSettingResponses];

export type ClearSettingsFileData = {
    body: {
        key: string;
    };
    path?: never;
    query?: never;
    url: '/settings/file';
};

export type ClearSettingsFileErrors = {
    404: string;
};

export type ClearSettingsFileError = ClearSettingsFileErrors[keyof ClearSettingsFileErrors];

export type ClearSettingsFileResponses = {
    /**
     * Ok
     */
    200: ServerSettingResponse;
};

export type ClearSettingsFileResponse = ClearSettingsFileResponses[keyof ClearSettingsFileResponses];

export type SetSettingFileData = {
    body: {
        file: Blob | File;
        key: string;
    };
    path?: never;
    query?: never;
    url: '/settings/file';
};

export type SetSettingFileResponses = {
    /**
     * Ok
     */
    200: ServerSettingResponse;
};

export type SetSettingFileResponse = SetSettingFileResponses[keyof SetSettingFileResponses];

export type GetFeatureFlagsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/settings/feature-flags';
};

export type GetFeatureFlagsResponses = {
    /**
     * Ok
     */
    200: FeatureFlagResponse;
};

export type GetFeatureFlagsResponse = GetFeatureFlagsResponses[keyof GetFeatureFlagsResponses];

export type GetScreensData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/screen';
};

export type GetScreensResponses = {
    /**
     * Ok
     */
    200: Array<ScreenResponse>;
};

export type GetScreensResponse = GetScreensResponses[keyof GetScreensResponses];

export type CreateScreenData = {
    body: ScreenCreateParams;
    path?: never;
    query?: never;
    url: '/screen';
};

export type CreateScreenResponses = {
    /**
     * Ok
     */
    200: ScreenResponse;
};

export type CreateScreenResponse = CreateScreenResponses[keyof CreateScreenResponses];

export type EnableStrobeOnLightsGroupData = {
    body?: StrobeProps;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/{id}/strobe/enable';
};

export type EnableStrobeOnLightsGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type EnableStrobeOnLightsGroupResponse = EnableStrobeOnLightsGroupResponses[keyof EnableStrobeOnLightsGroupResponses];

export type DisableStrobeOnLightsGroupData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/{id}/strobe/disable';
};

export type DisableStrobeOnLightsGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type DisableStrobeOnLightsGroupResponse = DisableStrobeOnLightsGroupResponses[keyof DisableStrobeOnLightsGroupResponses];

export type FreezeLightsGroupData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/{id}/freeze';
};

export type FreezeLightsGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type FreezeLightsGroupResponse = FreezeLightsGroupResponses[keyof FreezeLightsGroupResponses];

export type UnfreezeLightsGroupData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/{id}/unfreeze';
};

export type UnfreezeLightsGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type UnfreezeLightsGroupResponse = UnfreezeLightsGroupResponses[keyof UnfreezeLightsGroupResponses];

export type ClearLightsGroupMasterDimmerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/{id}/dimmer';
};

export type ClearLightsGroupMasterDimmerErrors = {
    404: {
        message: string;
    };
};

export type ClearLightsGroupMasterDimmerError = ClearLightsGroupMasterDimmerErrors[keyof ClearLightsGroupMasterDimmerErrors];

export type ClearLightsGroupMasterDimmerResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type SetLightsGroupMasterDimmerData = {
    body: GroupFixtureDimmingParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/{id}/dimmer';
};

export type SetLightsGroupMasterDimmerErrors = {
    404: {
        message: string;
    };
};

export type SetLightsGroupMasterDimmerError = SetLightsGroupMasterDimmerErrors[keyof SetLightsGroupMasterDimmerErrors];

export type SetLightsGroupMasterDimmerResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type SetGroupParOverrideData = {
    body: GroupFixtureOverrideParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/par/{id}/override';
};

export type SetGroupParOverrideResponses = {
    /**
     * No content
     */
    204: void;
};

export type SetGroupParOverrideResponse = SetGroupParOverrideResponses[keyof SetGroupParOverrideResponses];

export type ResetGroupParData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/par/{id}/reset';
};

export type ResetGroupParResponses = {
    /**
     * No content
     */
    204: void;
};

export type ResetGroupParResponse = ResetGroupParResponses[keyof ResetGroupParResponses];

export type FreezeGroupParData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/par/{id}/freeze';
};

export type FreezeGroupParResponses = {
    /**
     * No content
     */
    204: void;
};

export type FreezeGroupParResponse = FreezeGroupParResponses[keyof FreezeGroupParResponses];

export type UnfreezeGroupParData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/par/{id}/unfreeze';
};

export type UnfreezeGroupParResponses = {
    /**
     * No content
     */
    204: void;
};

export type UnfreezeGroupParResponse = UnfreezeGroupParResponses[keyof UnfreezeGroupParResponses];

export type SetGroupMovingHeadRgbOverrideData = {
    body: GroupFixtureOverrideParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/moving-head-rgb/{id}/override';
};

export type SetGroupMovingHeadRgbOverrideResponses = {
    /**
     * No content
     */
    204: void;
};

export type SetGroupMovingHeadRgbOverrideResponse = SetGroupMovingHeadRgbOverrideResponses[keyof SetGroupMovingHeadRgbOverrideResponses];

export type ResetGroupMovingHeadRgbData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/moving-head-rgb/{id}/reset';
};

export type ResetGroupMovingHeadRgbResponses = {
    /**
     * No content
     */
    204: void;
};

export type ResetGroupMovingHeadRgbResponse = ResetGroupMovingHeadRgbResponses[keyof ResetGroupMovingHeadRgbResponses];

export type FreezeGroupMovingHeadRgbData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/moving-head-rgb/{id}/freeze';
};

export type FreezeGroupMovingHeadRgbResponses = {
    /**
     * No content
     */
    204: void;
};

export type FreezeGroupMovingHeadRgbResponse = FreezeGroupMovingHeadRgbResponses[keyof FreezeGroupMovingHeadRgbResponses];

export type UnfreezeMovingHeadRgbData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/moving-head-rgb/{id}/unfreeze';
};

export type UnfreezeMovingHeadRgbResponses = {
    /**
     * No content
     */
    204: void;
};

export type UnfreezeMovingHeadRgbResponse = UnfreezeMovingHeadRgbResponses[keyof UnfreezeMovingHeadRgbResponses];

export type SetGroupMovingHeadWheelOverrideData = {
    body: GroupFixtureOverrideParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/moving-head-wheel/{id}/override';
};

export type SetGroupMovingHeadWheelOverrideResponses = {
    /**
     * No content
     */
    204: void;
};

export type SetGroupMovingHeadWheelOverrideResponse = SetGroupMovingHeadWheelOverrideResponses[keyof SetGroupMovingHeadWheelOverrideResponses];

export type ResetGroupMovingHeadWheelData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/moving-head-wheel/{id}/reset';
};

export type ResetGroupMovingHeadWheelResponses = {
    /**
     * No content
     */
    204: void;
};

export type ResetGroupMovingHeadWheelResponse = ResetGroupMovingHeadWheelResponses[keyof ResetGroupMovingHeadWheelResponses];

export type FreezeGroupMovingHeadWheelData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/moving-head-wheel/{id}/freeze';
};

export type FreezeGroupMovingHeadWheelResponses = {
    /**
     * No content
     */
    204: void;
};

export type FreezeGroupMovingHeadWheelResponse = FreezeGroupMovingHeadWheelResponses[keyof FreezeGroupMovingHeadWheelResponses];

export type UnfreezeMovingHeadWheelData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/moving-head-wheel/{id}/unfreeze';
};

export type UnfreezeMovingHeadWheelResponses = {
    /**
     * No content
     */
    204: void;
};

export type UnfreezeMovingHeadWheelResponse = UnfreezeMovingHeadWheelResponses[keyof UnfreezeMovingHeadWheelResponses];

export type TurnOnLightsSwitchData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/switch/{id}/on';
};

export type TurnOnLightsSwitchResponses = {
    /**
     * No content
     */
    204: void;
};

export type TurnOnLightsSwitchResponse = TurnOnLightsSwitchResponses[keyof TurnOnLightsSwitchResponses];

export type TurnOffLightsSwitchData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/switch/{id}/off';
};

export type TurnOffLightsSwitchResponses = {
    /**
     * No content
     */
    204: void;
};

export type TurnOffLightsSwitchResponse = TurnOffLightsSwitchResponses[keyof TurnOffLightsSwitchResponses];

export type GetLightsControllersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lights/controller';
};

export type GetLightsControllersResponses = {
    /**
     * Ok
     */
    200: Array<LightsControllerResponse>;
};

export type GetLightsControllersResponse = GetLightsControllersResponses[keyof GetLightsControllersResponses];

export type CreateLightsControllerData = {
    body: LightsControllerCreateParams;
    path?: never;
    query?: never;
    url: '/lights/controller';
};

export type CreateLightsControllerResponses = {
    /**
     * Ok
     */
    200: LightsControllerResponse;
};

export type CreateLightsControllerResponse = CreateLightsControllerResponses[keyof CreateLightsControllerResponses];

export type GetSingleLightsControllerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/controller/{id}';
};

export type GetSingleLightsControllerResponses = {
    /**
     * Ok
     */
    200: LightsControllerResponse;
};

export type GetSingleLightsControllerResponse = GetSingleLightsControllerResponses[keyof GetSingleLightsControllerResponses];

export type GetAllLightsSwitchesData = {
    body?: never;
    path?: never;
    query?: {
        enabled?: boolean;
    };
    url: '/lights/switch';
};

export type GetAllLightsSwitchesResponses = {
    /**
     * Ok
     */
    200: Array<LightsSwitchResponse>;
};

export type GetAllLightsSwitchesResponse = GetAllLightsSwitchesResponses[keyof GetAllLightsSwitchesResponses];

export type GetLightsGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lights/group';
};

export type GetLightsGroupsResponses = {
    /**
     * Ok
     */
    200: Array<LightsGroupResponse>;
};

export type GetLightsGroupsResponse = GetLightsGroupsResponses[keyof GetLightsGroupsResponses];

export type GetSingleLightsGroupData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/group/{id}';
};

export type GetSingleLightsGroupResponses = {
    /**
     * Ok
     */
    200: LightsGroupResponse;
};

export type GetSingleLightsGroupResponse = GetSingleLightsGroupResponses[keyof GetSingleLightsGroupResponses];

export type GetControllerLightsGroupsData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/controller/{id}/groups';
};

export type GetControllerLightsGroupsResponses = {
    /**
     * Ok
     */
    200: Array<LightsGroupResponse>;
};

export type GetControllerLightsGroupsResponse = GetControllerLightsGroupsResponses[keyof GetControllerLightsGroupsResponses];

export type CreateLightsGroupData = {
    body: LightsGroupCreateParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/controller/{id}/group';
};

export type CreateLightsGroupResponses = {
    /**
     * Ok
     */
    200: LightsGroupResponse;
};

export type CreateLightsGroupResponse = CreateLightsGroupResponses[keyof CreateLightsGroupResponses];

export type GetControllerLightsSwitchesData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/controller/{id}/switches';
};

export type GetControllerLightsSwitchesResponses = {
    /**
     * Ok
     */
    200: Array<LightsSwitchResponse>;
};

export type GetControllerLightsSwitchesResponse = GetControllerLightsSwitchesResponses[keyof GetControllerLightsSwitchesResponses];

export type CreateLightsSwitchData = {
    body: LightsSwitchCreateParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/lights/controller/{id}/switches';
};

export type CreateLightsSwitchResponses = {
    /**
     * Ok
     */
    200: LightsSwitchResponse;
};

export type CreateLightsSwitchResponse = CreateLightsSwitchResponses[keyof CreateLightsSwitchResponses];

export type GetAllLightsParsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lights/fixture/par';
};

export type GetAllLightsParsResponses = {
    /**
     * Ok
     */
    200: Array<ParResponse>;
};

export type GetAllLightsParsResponse = GetAllLightsParsResponses[keyof GetAllLightsParsResponses];

export type CreateLightsParData = {
    body: LightsParCreateParams;
    path?: never;
    query?: never;
    url: '/lights/fixture/par';
};

export type CreateLightsParResponses = {
    /**
     * Ok
     */
    200: ParResponse;
};

export type CreateLightsParResponse = CreateLightsParResponses[keyof CreateLightsParResponses];

export type GetAllLightsMovingHeadsRgbData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lights/fixture/moving-head/rgb';
};

export type GetAllLightsMovingHeadsRgbResponses = {
    /**
     * Ok
     */
    200: Array<MovingHeadRgbResponse>;
};

export type GetAllLightsMovingHeadsRgbResponse = GetAllLightsMovingHeadsRgbResponses[keyof GetAllLightsMovingHeadsRgbResponses];

export type CreateLightsMovingHeadRgbData = {
    body: LightsMovingHeadRgbCreateParams;
    path?: never;
    query?: never;
    url: '/lights/fixture/moving-head/rgb';
};

export type CreateLightsMovingHeadRgbResponses = {
    /**
     * Ok
     */
    200: MovingHeadRgbResponse;
};

export type CreateLightsMovingHeadRgbResponse = CreateLightsMovingHeadRgbResponses[keyof CreateLightsMovingHeadRgbResponses];

export type GetAllLightsMovingHeadsWheelData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lights/fixture/moving-head/wheel';
};

export type GetAllLightsMovingHeadsWheelResponses = {
    /**
     * Ok
     */
    200: Array<MovingHeadWheelResponse>;
};

export type GetAllLightsMovingHeadsWheelResponse = GetAllLightsMovingHeadsWheelResponses[keyof GetAllLightsMovingHeadsWheelResponses];

export type CreateLightsMovingHeadWheelData = {
    body: LightsMovingHeadWheelCreateParams;
    path?: never;
    query?: never;
    url: '/lights/fixture/moving-head/wheel';
};

export type CreateLightsMovingHeadWheelResponses = {
    /**
     * Ok
     */
    200: MovingHeadWheelResponse;
};

export type CreateLightsMovingHeadWheelResponse = CreateLightsMovingHeadWheelResponses[keyof CreateLightsMovingHeadWheelResponses];

export type GetAllLightsEffectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lights/effects';
};

export type GetAllLightsEffectsResponses = {
    /**
     * Ok
     */
    200: Array<string>;
};

export type GetAllLightsEffectsResponse = GetAllLightsEffectsResponses[keyof GetAllLightsEffectsResponses];

export type GetAllLightsColorsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lights/colors';
};

export type GetAllLightsColorsResponses = {
    /**
     * Ok
     */
    200: Array<LightsColorResponse>;
};

export type GetAllLightsColorsResponse = GetAllLightsColorsResponses[keyof GetAllLightsColorsResponses];

export type GetAudiosData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/audio';
};

export type GetAudiosResponses = {
    /**
     * Ok
     */
    200: Array<AudioResponse>;
};

export type GetAudiosResponse = GetAudiosResponses[keyof GetAudiosResponses];

export type CreateAudioData = {
    body: AudioCreateParams;
    path?: never;
    query?: never;
    url: '/audio';
};

export type CreateAudioResponses = {
    /**
     * Ok
     */
    200: AudioResponse;
};

export type CreateAudioResponse = CreateAudioResponses[keyof CreateAudioResponses];

export type SetAudioPlayingData = {
    body: SetAudioPlayingParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/audio/{id}/playing';
};

export type SetAudioPlayingErrors = {
    403: string;
};

export type SetAudioPlayingError = SetAudioPlayingErrors[keyof SetAudioPlayingErrors];

export type SetAudioPlayingResponses = {
    /**
     * No content
     */
    204: void;
};

export type SetAudioPlayingResponse = SetAudioPlayingResponses[keyof SetAudioPlayingResponses];

export type GetAudioHandlersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/audio';
};

export type GetAudioHandlersResponses = {
    /**
     * Ok
     */
    200: Array<HandlerResponseAudioResponse>;
};

export type GetAudioHandlersResponse = GetAudioHandlersResponses[keyof GetAudioHandlersResponses];

export type SetAudioHandlerData = {
    body: NewHandlerParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/audio/{id}';
};

export type SetAudioHandlerResponses = {
    /**
     * No content
     */
    204: void;
};

export type SetAudioHandlerResponse = SetAudioHandlerResponses[keyof SetAudioHandlerResponses];

export type GetLightsHandlersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/lights';
};

export type GetLightsHandlersResponses = {
    /**
     * Ok
     */
    200: Array<HandlerResponseLightsGroupResponse>;
};

export type GetLightsHandlersResponse = GetLightsHandlersResponses[keyof GetLightsHandlersResponses];

export type SetLightsHandlerData = {
    body: NewHandlerParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/lights/{id}';
};

export type SetLightsHandlerResponses = {
    /**
     * No content
     */
    204: void;
};

export type SetLightsHandlerResponse = SetLightsHandlerResponses[keyof SetLightsHandlerResponses];

export type GetScreenHandlersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen';
};

export type GetScreenHandlersResponses = {
    /**
     * Ok
     */
    200: Array<HandlerResponseScreenResponse>;
};

export type GetScreenHandlersResponse = GetScreenHandlersResponses[keyof GetScreenHandlersResponses];

export type SetScreenHandlerData = {
    body: NewHandlerParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/screen/{id}';
};

export type SetScreenHandlerResponses = {
    /**
     * No content
     */
    204: void;
};

export type SetScreenHandlerResponse = SetScreenHandlerResponses[keyof SetScreenHandlerResponses];

export type ResetAllHandlersToDefaultsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/all/reset-to-defaults';
};

export type ResetAllHandlersToDefaultsResponses = {
    /**
     * No content
     */
    204: void;
};

export type ResetAllHandlersToDefaultsResponse = ResetAllHandlersToDefaultsResponses[keyof ResetAllHandlersToDefaultsResponses];

export type GetIntegrationEndpointsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/integration/endpoints';
};

export type GetIntegrationEndpointsResponses = {
    /**
     * Ok
     */
    200: Array<string>;
};

export type GetIntegrationEndpointsResponse = GetIntegrationEndpointsResponses[keyof GetIntegrationEndpointsResponses];

export type GetAllIntegrationUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/integration';
};

export type GetAllIntegrationUsersResponses = {
    /**
     * Ok
     */
    200: Array<IntegrationUserResponse>;
};

export type GetAllIntegrationUsersResponse = GetAllIntegrationUsersResponses[keyof GetAllIntegrationUsersResponses];

export type CreateIntegrationUserData = {
    body: IntegrationUserCreateRequest;
    path?: never;
    query?: never;
    url: '/user/integration';
};

export type CreateIntegrationUserResponses = {
    /**
     * Ok
     */
    200: IntegrationUserResponse;
};

export type CreateIntegrationUserResponse = CreateIntegrationUserResponses[keyof CreateIntegrationUserResponses];

export type DeleteIntegrationUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/integration/{id}';
};

export type DeleteIntegrationUserResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteIntegrationUserResponse = DeleteIntegrationUserResponses[keyof DeleteIntegrationUserResponses];

export type GetSingleIntegrationUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/integration/{id}';
};

export type GetSingleIntegrationUserResponses = {
    /**
     * Ok
     */
    200: IntegrationUserResponse;
};

export type GetSingleIntegrationUserResponse = GetSingleIntegrationUserResponses[keyof GetSingleIntegrationUserResponses];

export type UpdateIntegrationUserData = {
    body: IntegrationUserUpdateRequest;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/integration/{id}';
};

export type UpdateIntegrationUserResponses = {
    /**
     * Ok
     */
    200: IntegrationUserResponse;
};

export type UpdateIntegrationUserResponse = UpdateIntegrationUserResponses[keyof UpdateIntegrationUserResponses];

export type GetIntegrationUserKeyData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/integration/{id}/key';
};

export type GetIntegrationUserKeyResponses = {
    /**
     * Ok
     */
    200: string;
};

export type GetIntegrationUserKeyResponse = GetIntegrationUserKeyResponses[keyof GetIntegrationUserKeyResponses];

export type GetAllOrdersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/orders';
};

export type GetAllOrdersErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type GetAllOrdersError = GetAllOrdersErrors[keyof GetAllOrdersErrors];

export type GetAllOrdersResponses = {
    /**
     * Ok
     */
    200: Array<Order>;
};

export type GetAllOrdersResponse = GetAllOrdersResponses[keyof GetAllOrdersResponses];

export type AddOrderData = {
    body: OrderRequest;
    path?: never;
    query?: never;
    url: '/orders';
};

export type AddOrderErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type AddOrderError = AddOrderErrors[keyof AddOrderErrors];

export type AddOrderResponses = {
    /**
     * Ok
     */
    200: Array<Order>;
};

export type AddOrderResponse = AddOrderResponses[keyof AddOrderResponses];

export type AddOrderWebhookData = {
    body: OrderRequest;
    headers: {
        'X-Signature': string;
    };
    path?: never;
    query?: never;
    url: '/orders/webhook';
};

export type AddOrderWebhookErrors = {
    400: {
        message: string;
    };
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type AddOrderWebhookError = AddOrderWebhookErrors[keyof AddOrderWebhookErrors];

export type AddOrderWebhookResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type RemoveOrderData = {
    body?: never;
    path: {
        orderNumber: number;
    };
    query?: never;
    url: '/orders/{orderNumber}';
};

export type RemoveOrderErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type RemoveOrderError = RemoveOrderErrors[keyof RemoveOrderErrors];

export type RemoveOrderResponses = {
    /**
     * Ok
     */
    200: Array<Order>;
};

export type RemoveOrderResponse = RemoveOrderResponses[keyof RemoveOrderResponses];

export type DisableAllModesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes';
};

export type DisableAllModesResponses = {
    200: unknown;
};

export type DisableCenturionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/centurion';
};

export type DisableCenturionErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type DisableCenturionError = DisableCenturionErrors[keyof DisableCenturionErrors];

export type DisableCenturionResponses = {
    200: unknown;
};

export type GetCenturionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/centurion';
};

export type GetCenturionErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type GetCenturionError = GetCenturionErrors[keyof GetCenturionErrors];

export type GetCenturionResponses = {
    /**
     * Ok
     */
    200: CenturionResponse | null;
};

export type GetCenturionResponse = GetCenturionResponses[keyof GetCenturionResponses];

export type EnableCenturionData = {
    body: CenturionParams;
    path?: never;
    query?: never;
    url: '/modes/centurion';
};

export type EnableCenturionErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type EnableCenturionError = EnableCenturionErrors[keyof EnableCenturionErrors];

export type EnableCenturionResponses = {
    204: string;
};

export type EnableCenturionResponse = EnableCenturionResponses[keyof EnableCenturionResponses];

export type DisableTimeTrailRacingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/time-trail-race';
};

export type DisableTimeTrailRacingErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type DisableTimeTrailRacingError = DisableTimeTrailRacingErrors[keyof DisableTimeTrailRacingErrors];

export type DisableTimeTrailRacingResponses = {
    200: unknown;
};

export type GetRaceStateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/time-trail-race';
};

export type GetRaceStateErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type GetRaceStateError = GetRaceStateErrors[keyof GetRaceStateErrors];

export type GetRaceStateResponses = {
    /**
     * Ok
     */
    200: {
        scoreboard: Array<ScoreboardItem>;
        sessionName: string;
        state: TimeTrailRaceState;
    };
};

export type GetRaceStateResponse = GetRaceStateResponses[keyof GetRaceStateResponses];

export type EnableTimeTrailRaceData = {
    body: TimeTrailRaceParams;
    path?: never;
    query?: never;
    url: '/modes/time-trail-race';
};

export type EnableTimeTrailRaceErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type EnableTimeTrailRaceError = EnableTimeTrailRaceErrors[keyof EnableTimeTrailRaceErrors];

export type EnableTimeTrailRaceResponses = {
    204: string;
};

export type EnableTimeTrailRaceResponse = EnableTimeTrailRaceResponses[keyof EnableTimeTrailRaceResponses];

export type RaceRegisterPlayerData = {
    body: RegisterPlayerParams;
    path?: never;
    query?: never;
    url: '/modes/time-trail-race/register-player';
};

export type RaceRegisterPlayerErrors = {
    /**
     * Time Trail Race not enabled
     */
    404: ModeDisabledError;
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
    /**
     * Time Trail Race not in INITIALIZED or SCOREBOARD state
     */
    428: InvalidStateError;
};

export type RaceRegisterPlayerError = RaceRegisterPlayerErrors[keyof RaceRegisterPlayerErrors];

export type RaceRegisterPlayerResponses = {
    /**
     * Ok
     */
    200: RacePlayerRegisteredEvent;
};

export type RaceRegisterPlayerResponse = RaceRegisterPlayerResponses[keyof RaceRegisterPlayerResponses];

export type RaceReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/time-trail-race/ready';
};

export type RaceReadyErrors = {
    /**
     * Time Trail Race not enabled
     */
    404: ModeDisabledError;
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
    /**
     * Time Trail Race not in PLAYER_REGISTERED state
     */
    428: InvalidStateError;
};

export type RaceReadyError = RaceReadyErrors[keyof RaceReadyErrors];

export type RaceReadyResponses = {
    /**
     * Ok
     */
    200: RacePlayerReadyEvent;
};

export type RaceReadyResponse = RaceReadyResponses[keyof RaceReadyResponses];

export type RaceStartData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/time-trail-race/start';
};

export type RaceStartErrors = {
    /**
     * Time Trail Race not enabled
     */
    404: ModeDisabledError;
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
    /**
     * Time Trail Race not in PLAYER_READY state
     */
    428: InvalidStateError;
};

export type RaceStartError = RaceStartErrors[keyof RaceStartErrors];

export type RaceStartResponses = {
    /**
     * Ok
     */
    200: RaceStartedEvent;
};

export type RaceStartResponse = RaceStartResponses[keyof RaceStartResponses];

export type RaceFinishData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/time-trail-race/finish';
};

export type RaceFinishErrors = {
    /**
     * Time Trail Race not enabled
     */
    404: ModeDisabledError;
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
    /**
     * Time Trail Race not in STARTED state
     */
    428: InvalidStateError;
};

export type RaceFinishError = RaceFinishErrors[keyof RaceFinishErrors];

export type RaceFinishResponses = {
    /**
     * Ok
     */
    200: RaceFinishedEvent;
};

export type RaceFinishResponse = RaceFinishResponses[keyof RaceFinishResponses];

export type RaceRevealScoreData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/time-trail-race/reveal-score';
};

export type RaceRevealScoreErrors = {
    /**
     * Time Trail Race not enabled
     */
    404: ModeDisabledError;
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
    /**
     * Time Trail Race not in FINISHED state
     */
    428: InvalidStateError;
};

export type RaceRevealScoreError = RaceRevealScoreErrors[keyof RaceRevealScoreErrors];

export type RaceRevealScoreResponses = {
    /**
     * Ok
     */
    200: RaceScoreboardEvent;
};

export type RaceRevealScoreResponse = RaceRevealScoreResponses[keyof RaceRevealScoreResponses];

export type RaceResetPlayerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/time-trail-race/reset-player';
};

export type RaceResetPlayerErrors = {
    /**
     * Time Trail Race not enabled
     */
    404: ModeDisabledError;
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type RaceResetPlayerError = RaceResetPlayerErrors[keyof RaceResetPlayerErrors];

export type RaceResetPlayerResponses = {
    /**
     * Ok
     */
    200: RaceScoreboardEvent;
};

export type RaceResetPlayerResponse = RaceResetPlayerResponses[keyof RaceResetPlayerResponses];

export type GetCenturionStateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/centurion/state';
};

export type GetCenturionStateErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type GetCenturionStateError = GetCenturionStateErrors[keyof GetCenturionStateErrors];

export type GetCenturionStateResponses = {
    /**
     * Ok
     */
    200: CenturionStateResponse;
};

export type GetCenturionStateResponse = GetCenturionStateResponses[keyof GetCenturionStateResponses];

export type StartCenturionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/centurion/start';
};

export type StartCenturionErrors = {
    /**
     * Centurion not enabled
     */
    404: ModeDisabledError;
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
    /**
     * Centurion not yet fully initialized. Please wait and try again later
     */
    428: string;
};

export type StartCenturionError = StartCenturionErrors[keyof StartCenturionErrors];

export type StartCenturionResponses = {
    /**
     * Start commands sent
     */
    204: 'Centurion not yet fully initialized. Please wait and try again later' | '';
};

export type StartCenturionResponse = StartCenturionResponses[keyof StartCenturionResponses];

export type SkipCenturionData = {
    body: SkipCenturionRequest;
    path?: never;
    query?: never;
    url: '/modes/centurion/skip';
};

export type SkipCenturionErrors = {
    /**
     * Invalid timestamp provided
     */
    400: string;
    /**
     * Centurion not enabled
     */
    404: ModeDisabledError;
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type SkipCenturionError = SkipCenturionErrors[keyof SkipCenturionErrors];

export type SkipCenturionResponses = {
    /**
     * Skip commands sent
     */
    204: string;
};

export type SkipCenturionResponse = SkipCenturionResponses[keyof SkipCenturionResponses];

export type StopCenturionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/centurion/stop';
};

export type StopCenturionErrors = {
    /**
     * Centurion not enabled
     */
    404: ModeDisabledError;
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type StopCenturionError = StopCenturionErrors[keyof StopCenturionErrors];

export type StopCenturionResponses = {
    /**
     * Start commands sent
     */
    204: string;
};

export type StopCenturionResponse = StopCenturionResponses[keyof StopCenturionResponses];

export type GetCenturionTapesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modes/centurion/tapes';
};

export type GetCenturionTapesErrors = {
    /**
     * Endpoint is disabled in the server settings
     */
    409: string;
};

export type GetCenturionTapesError = GetCenturionTapesErrors[keyof GetCenturionTapesErrors];

export type GetCenturionTapesResponses = {
    /**
     * Ok
     */
    200: Array<MixTapeResponse>;
};

export type GetCenturionTapesResponse = GetCenturionTapesResponses[keyof GetCenturionTapesResponses];

export type GetRoomResponsibleLegacyUrlData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/room-responsible-legacy-url';
};

export type GetRoomResponsibleLegacyUrlResponses = {
    /**
     * Ok
     */
    200: string;
};

export type GetRoomResponsibleLegacyUrlResponse = GetRoomResponsibleLegacyUrlResponses[keyof GetRoomResponsibleLegacyUrlResponses];

export type GetPostersData = {
    body?: never;
    path?: never;
    query?: {
        alwaysReturnBorrelPosters?: boolean;
    };
    url: '/handler/screen/poster/carousel';
};

export type GetPostersResponses = {
    /**
     * Ok
     */
    200: PosterResponse;
};

export type GetPostersResponse = GetPostersResponses[keyof GetPostersResponses];

export type ForceUpdatePostersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/carousel/force-update';
};

export type ForceUpdatePostersResponses = {
    /**
     * No content
     */
    204: void;
};

export type ForceUpdatePostersResponse = ForceUpdatePostersResponses[keyof ForceUpdatePostersResponses];

export type GetPosterBorrelModeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/carousel/borrel-mode';
};

export type GetPosterBorrelModeResponses = {
    /**
     * Ok
     */
    200: BorrelModeResponse;
};

export type GetPosterBorrelModeResponse = GetPosterBorrelModeResponses[keyof GetPosterBorrelModeResponses];

export type SetPosterBorrelModeData = {
    body: BorrelModeParams;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/carousel/borrel-mode';
};

export type SetPosterBorrelModeResponses = {
    /**
     * No content
     */
    204: void;
};

export type SetPosterBorrelModeResponse = SetPosterBorrelModeResponses[keyof SetPosterBorrelModeResponses];

export type GetTrainsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/carousel/train-departures';
};

export type GetTrainsResponses = {
    /**
     * Ok
     */
    200: Array<TrainResponse>;
};

export type GetTrainsResponse = GetTrainsResponses[keyof GetTrainsResponses];

export type GetPhotoData = {
    body: GewisPhotoAlbumParams;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/carousel/photo';
};

export type GetPhotoResponses = {
    /**
     * Ok
     */
    200: PhotoResponse;
};

export type GetPhotoResponse = GetPhotoResponses[keyof GetPhotoResponses];

export type GetOlympicsMedalTableData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/carousel/olympics/medal-table';
};

export type GetOlympicsMedalTableResponses = {
    /**
     * Ok
     */
    200: Array<MedalTableRecord>;
};

export type GetOlympicsMedalTableResponse = GetOlympicsMedalTableResponses[keyof GetOlympicsMedalTableResponses];

export type GetDutchOlympicMedalsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/carousel/olympics/country-medals';
};

export type GetDutchOlympicMedalsResponses = {
    /**
     * Ok
     */
    200: CountryMedalResponse;
};

export type GetDutchOlympicMedalsResponse = GetDutchOlympicMedalsResponses[keyof GetDutchOlympicMedalsResponses];

export type GetPosterSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/settings';
};

export type GetPosterSettingsResponses = {
    /**
     * Ok
     */
    200: PosterScreenSettingsResponse;
};

export type GetPosterSettingsResponse = GetPosterSettingsResponses[keyof GetPosterSettingsResponses];

export type GetSettingsProgressBarLogoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/settings/progress-bar-logo';
};

export type GetSettingsProgressBarLogoResponses = {
    /**
     * No content
     */
    204: void;
};

export type GetSettingsProgressBarLogoResponse = GetSettingsProgressBarLogoResponses[keyof GetSettingsProgressBarLogoResponses];

export type GetSettingsProgressBarStylesheetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/settings/custom-stylesheet';
};

export type GetSettingsProgressBarStylesheetResponses = {
    /**
     * No content
     */
    204: void;
};

export type GetSettingsProgressBarStylesheetResponse = GetSettingsProgressBarStylesheetResponses[keyof GetSettingsProgressBarStylesheetResponses];

export type HideStaticPosterData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/static';
};

export type HideStaticPosterResponses = {
    /**
     * No content
     */
    204: void;
};

export type HideStaticPosterResponse = HideStaticPosterResponses[keyof HideStaticPosterResponses];

export type GetStaticPosterHandlerStateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/static';
};

export type GetStaticPosterHandlerStateResponses = {
    /**
     * Ok
     */
    200: StaticPosterHandlerState;
};

export type GetStaticPosterHandlerStateResponse = GetStaticPosterHandlerStateResponses[keyof GetStaticPosterHandlerStateResponses];

export type SetStaticPosterClockData = {
    body: SetClockRequest;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/static/clock';
};

export type SetStaticPosterClockResponses = {
    /**
     * No content
     */
    204: void;
};

export type SetStaticPosterClockResponse = SetStaticPosterClockResponses[keyof SetStaticPosterClockResponses];

export type GetAllStaticPostersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/screen/poster/static/items';
};

export type GetAllStaticPostersResponses = {
    /**
     * Ok
     */
    200: Array<LocalPosterResponse>;
};

export type GetAllStaticPostersResponse = GetAllStaticPostersResponses[keyof GetAllStaticPostersResponses];

export type CreateStaticPosterFileData = {
    body: {
        file: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/handler/screen/poster/static/items/file';
};

export type CreateStaticPosterFileErrors = {
    400: 'Invalid file type, expected an image or a video.';
};

export type CreateStaticPosterFileError = CreateStaticPosterFileErrors[keyof CreateStaticPosterFileErrors];

export type CreateStaticPosterFileResponses = {
    /**
     * Ok
     */
    200: LocalPosterResponse;
};

export type CreateStaticPosterFileResponse = CreateStaticPosterFileResponses[keyof CreateStaticPosterFileResponses];

export type CreateStaticPosterUrlData = {
    body: {
        url: string;
    };
    path?: never;
    query?: never;
    url: '/handler/screen/poster/static/items/url';
};

export type CreateStaticPosterUrlResponses = {
    /**
     * Ok
     */
    200: LocalPosterResponse;
};

export type CreateStaticPosterUrlResponse = CreateStaticPosterUrlResponses[keyof CreateStaticPosterUrlResponses];

export type DeleteStaticPosterData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/screen/poster/static/items/{id}';
};

export type DeleteStaticPosterResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteStaticPosterResponse = DeleteStaticPosterResponses[keyof DeleteStaticPosterResponses];

export type ShowStaticPosterData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/screen/poster/static/items/{id}/show';
};

export type ShowStaticPosterResponses = {
    /**
     * No content
     */
    204: void;
};

export type ShowStaticPosterResponse = ShowStaticPosterResponses[keyof ShowStaticPosterResponses];

export type ApplyLightsEffectColorData = {
    body: Array<LightsEffectsColorCreateParams>;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/lights/set-effects/{id}/color';
};

export type ApplyLightsEffectColorResponses = {
    /**
     * Ok
     */
    200: {
        message: string;
    };
};

export type ApplyLightsEffectColorResponse = ApplyLightsEffectColorResponses[keyof ApplyLightsEffectColorResponses];

export type UpdateLightsEffectColorColorsData = {
    body: ColorsRequest;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/lights/set-effects/{id}/color/colors';
};

export type UpdateLightsEffectColorColorsErrors = {
    404: {
        message: string;
    };
};

export type UpdateLightsEffectColorColorsError = UpdateLightsEffectColorColorsErrors[keyof UpdateLightsEffectColorColorsErrors];

export type UpdateLightsEffectColorColorsResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type ApplyLightsEffectMovementData = {
    body: Array<LightsEffectsMovementCreateParams>;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/lights/set-effects/{id}/movement';
};

export type ApplyLightsEffectMovementResponses = {
    /**
     * Ok
     */
    200: {
        message: string;
    };
};

export type ApplyLightsEffectMovementResponse = ApplyLightsEffectMovementResponses[keyof ApplyLightsEffectMovementResponses];

export type GetAllPredefinedLightsEffectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/lights/set-effects/predefined';
};

export type GetAllPredefinedLightsEffectsResponses = {
    /**
     * Ok
     */
    200: Array<LightsPredefinedEffectResponse>;
};

export type GetAllPredefinedLightsEffectsResponse = GetAllPredefinedLightsEffectsResponses[keyof GetAllPredefinedLightsEffectsResponses];

export type CreatePredefinedLightsEffectData = {
    body: LightsPredefinedEffectCreateParams;
    path?: never;
    query?: never;
    url: '/handler/lights/set-effects/predefined';
};

export type CreatePredefinedLightsEffectResponses = {
    /**
     * Ok
     */
    200: LightsPredefinedEffectResponse;
};

export type CreatePredefinedLightsEffectResponse = CreatePredefinedLightsEffectResponses[keyof CreatePredefinedLightsEffectResponses];

export type DeletePredefinedLightsEffectData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/lights/set-effects/predefined/{id}';
};

export type DeletePredefinedLightsEffectResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeletePredefinedLightsEffectResponse = DeletePredefinedLightsEffectResponses[keyof DeletePredefinedLightsEffectResponses];

export type UpdatePredefinedLightsEffectData = {
    body: LightsPredefinedEffectUpdateParams;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/lights/set-effects/predefined/{id}';
};

export type UpdatePredefinedLightsEffectResponses = {
    /**
     * Ok
     */
    200: LightsPredefinedEffectResponse;
};

export type UpdatePredefinedLightsEffectResponse = UpdatePredefinedLightsEffectResponses[keyof UpdatePredefinedLightsEffectResponses];

export type GetAllScenesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Whether to return only scenes that are (not) marked as favorite
         */
        favorite?: boolean;
    };
    url: '/handler/lights/scenes';
};

export type GetAllScenesResponses = {
    /**
     * Ok
     */
    200: Array<LightsSceneResponse>;
};

export type GetAllScenesResponse = GetAllScenesResponses[keyof GetAllScenesResponses];

export type CreateSceneData = {
    body: CreateSceneParams;
    path?: never;
    query?: never;
    url: '/handler/lights/scenes';
};

export type CreateSceneErrors = {
    400: {
        reason: string;
    };
};

export type CreateSceneError = CreateSceneErrors[keyof CreateSceneErrors];

export type CreateSceneResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type DeleteSceneData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/lights/scenes/{id}';
};

export type DeleteSceneResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteSceneResponse = DeleteSceneResponses[keyof DeleteSceneResponses];

export type GetSingleSceneData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/lights/scenes/{id}';
};

export type GetSingleSceneResponses = {
    /**
     * Ok
     */
    200: LightsSceneResponse;
};

export type GetSingleSceneResponse = GetSingleSceneResponses[keyof GetSingleSceneResponses];

export type ApplySceneData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/handler/lights/scenes/{id}/apply';
};

export type ApplySceneResponses = {
    /**
     * No content
     */
    204: void;
};

export type ApplySceneResponse = ApplySceneResponses[keyof ApplySceneResponses];

export type ClearSceneData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handler/lights/scenes/clear';
};

export type ClearSceneResponses = {
    /**
     * No content
     */
    204: void;
};

export type ClearSceneResponse = ClearSceneResponses[keyof ClearSceneResponses];

export type GetPersonalDataData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/gdpr/personal-data/{userId}';
};

export type GetPersonalDataResponses = {
    /**
     * Ok
     */
    200: PersonalDataResponse;
};

export type GetPersonalDataResponse = GetPersonalDataResponses[keyof GetPersonalDataResponses];

export type StopArtificialBeatGeneratorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/beat-generator';
};

export type StopArtificialBeatGeneratorResponses = {
    /**
     * No content
     */
    204: void;
};

export type StopArtificialBeatGeneratorResponse = StopArtificialBeatGeneratorResponses[keyof StopArtificialBeatGeneratorResponses];

export type GetArtificialBeatGeneratorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/beat-generator';
};

export type GetArtificialBeatGeneratorResponses = {
    /**
     * Ok
     */
    200: ArtificialBeatGeneratorParams | null;
};

export type GetArtificialBeatGeneratorResponse = GetArtificialBeatGeneratorResponses[keyof GetArtificialBeatGeneratorResponses];

export type StartArtificialBeatGeneratorData = {
    body: ArtificialBeatGeneratorParams;
    path?: never;
    query?: never;
    url: '/beat-generator';
};

export type StartArtificialBeatGeneratorResponses = {
    /**
     * No content
     */
    204: void;
};

export type StartArtificialBeatGeneratorResponse = StartArtificialBeatGeneratorResponses[keyof StartArtificialBeatGeneratorResponses];

export type GetInformationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/me';
};

export type GetInformationErrors = {
    /**
     * User not found
     */
    404: HttpApiException;
};

export type GetInformationError = GetInformationErrors[keyof GetInformationErrors];

export type GetInformationResponses = {
    200: AuthUser;
};

export type GetInformationResponse = GetInformationResponses[keyof GetInformationResponses];

export type GetSecurityGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/groups';
};

export type GetSecurityGroupsResponses = {
    /**
     * Ok
     */
    200: ISecurityGroups;
};

export type GetSecurityGroupsResponse = GetSecurityGroupsResponses[keyof GetSecurityGroupsResponses];

export type GetAuditLogsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Id of the user
         */
        userId?: string;
        /**
         * Actions
         */
        action?: string;
        /**
         * In what order to return the logs. DESC by default (newest first)
         */
        order?: 'ASC' | 'DESC';
        /**
         * Pagination take
         */
        take?: number;
        /**
         * Pagination skip
         */
        skip?: number;
    };
    url: '/audit-logs';
};

export type GetAuditLogsResponses = {
    /**
     * Ok
     */
    200: PaginatedAuditLogEntryResponse;
};

export type GetAuditLogsResponse = GetAuditLogsResponses[keyof GetAuditLogsResponses];

export type AuthMockData = {
    body?: AuthUser;
    path?: never;
    query?: never;
    url: '/auth/mock';
};

export type AuthMockResponses = {
    /**
     * Success
     */
    200: AuthUser;
};

export type AuthMockResponse = AuthMockResponses[keyof AuthMockResponses];

export type GetOidcParametersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/oidc';
};

export type GetOidcParametersResponses = {
    /**
     * Ok
     */
    200: OidcConfig;
};

export type GetOidcParametersResponse = GetOidcParametersResponses[keyof GetOidcParametersResponses];

export type AuthOidcData = {
    body: OidcParameters;
    path?: never;
    query?: never;
    url: '/auth/oidc';
};

export type AuthOidcResponses = {
    /**
     * Success
     */
    200: AuthUser;
};

export type AuthOidcResponse = AuthOidcResponses[keyof AuthOidcResponses];

export type AuthKeyData = {
    body?: ApiKeyParameters;
    path?: never;
    query?: never;
    url: '/auth/key';
};

export type AuthKeyResponses = {
    /**
     * Success
     */
    200: AuthUser;
};

export type AuthKeyResponse = AuthKeyResponses[keyof AuthKeyResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}/api` | (string & {});
};